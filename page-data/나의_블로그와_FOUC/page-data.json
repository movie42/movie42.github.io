{"componentChunkName":"component---src-templates-blog-post-js","path":"/나의_블로그와_FOUC","result":{"data":{"markdownRemark":{"html":"<h1>결론부터 말합니다.</h1>\n<p>TLDL;</p>\n<ul>\n<li>아래 글은 저의 일기와 같은 형식으로 되어있습니다. 해결 과정이 궁금하면 읽으세요.</li>\n<li>제가 찾은 해결 방법만 적용하고 싶다면 이 파트만 읽으세요.</li>\n</ul>\n<blockquote>\n<p>참조<br>\n<a href=\"https://medium.com/@mikaelagurney/removing-fouc-in-a-gatsby-project-66034b8590b1\">Removing FOUC in a Gatsby Project</a></p>\n</blockquote>\n<p><strong>install package</strong></p>\n<p>FOUC는 스타일 컴포넌트 문제일 수도 있고 @import를 사용하여 불러온 웹 폰트 때문일 수도 있습니다.</p>\n<ol>\n<li>styled-components 때문이라면\n<code class=\"language-text\">gatsby-plugin-styled-components</code>, <code class=\"language-text\">styled-components</code>, <code class=\"language-text\">babel-plugin-styled-components</code>,</li>\n<li>@import된 font 때문이라면\n<code class=\"language-text\">gatsby-plugin-typography</code>, <code class=\"language-text\">react-typography</code>, <code class=\"language-text\">typography</code></li>\n<li>둘 다라면 둘 다 설치</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install gatsby-plugin-styled-components styled-components babel-plugin-styled-components gatsby-plugin-typography react-typography typography</code></pre></div>\n<p><strong>setup gatsby-config.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">gatsby-plugin-typography</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">pathToConfigModule</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">src/utils/typography</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">gatsby-plugin-styled-components</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>typography</strong></p>\n<p>경로를 src/utils/typography로 설정했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> Typography <span class=\"token keyword\">from</span> <span class=\"token string\">\"typography\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> typography <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Typography</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">baseFontSize</span><span class=\"token operator\">:</span> <span class=\"token string\">\"10px\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">baseLineHeight</span><span class=\"token operator\">:</span> <span class=\"token number\">1.666</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">googleFonts</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Noto Sans KR\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">styles</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">900</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"JetBrains Mono\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">styles</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">headerFontFamily</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Noto Sans KR\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sans-serif\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">bodyFontFamily</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Noto Sans KR\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sans-serif\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> typography<span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>setup layout with Globalstyle</strong></p>\n<ul>\n<li>Globalstyle<br>\n@import를 삭제하세요.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">-</span> @<span class=\"token keyword\">import</span> <span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@100;300;400;500;700;900&amp;display=swap'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>layout<br>\n레이어 아웃에 적용 후 용도별로 서브 레이어아웃을 만들어서 반드시 각각 page 컴포넌트에 적용해주어야합니다.</li>\n</ul>\n<blockquote>\n<p>참조<br>\n<a href=\"https://github.com/jeonghwan-kim/jeonghwan-kim.github.com/tree/master/src/components/layout\">jeonghwan-kim/jeonghwan-kim.github.com</a></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Header <span class=\"token keyword\">from</span> <span class=\"token string\">\"../header\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ThemeProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"styled-components\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Globalstyle <span class=\"token keyword\">from</span> <span class=\"token string\">\"../GlobalStyle\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> theme <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../theme/theme\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Layout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ThemeProvider theme<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>theme<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Globalstyle <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Header <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ThemeProvider<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Layout<span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 하여 FOUC를 없애고 성능을 개선할 수 있었습니다.</p>\n<h1>FOUC 해결 과정</h1>\n<p><img src=\"/blink.gif\" alt=\"FOUC\"></p>\n<p>원티드 2주간 챌린지가 끝나면서 마지막 특강 시간에 나의 블로그의 FOUC에 대해 알게 되었다. 깜박임이 발생했던 것을 몰랐던 것은 아니지만 이 문제가 뭔지 정확하게 정의할 수 없었고 해결을 위해 시간을 쓰는게 아까웠다. 시간을 절약하기 위해 갯츠비로 블로그를 만들었기 때문에 뭔가 시간이 아까웠다. 하지만 멘토님이 문제를 정확하게 정의를 해주었기 때문에 해결을 안 할 수가 없었다. 문제가 정의 됐는데도 해결을 위해 노력하지 않으면 개발자로써 자존심이 좀 상한다고 해야할까? 그래서 이틀간 갯츠비에서 FOUC 문제를 해결하기 위해 공부했던 것과 과정 등을 적어보려고한다.</p>\n<h2>FOUC(Flash Of Unstyled Content)</h2>\n<p>FOUC는 멘토님이 주신 <a href=\"https://ko.wikipedia.org/wiki/FOUC\">참고 링크</a>를 들어가 읽어보았다. 거기에 이렇게 나온다.</p>\n<blockquote>\n<p>웹 브라우저가 웹 페이지에 스타일 정의를 부르고 적용할 때 보여지는 부분을 최대한 빨리 수정하지만, 이 변화는 짧지 않은 시간 동안 나타나므로 사용자는 페이지에 오류가 있다는 생각을 하게 된다.</p>\n</blockquote>\n<p>즉, FOUC는 그냥 간과할 문제가 아니라 비즈니스의 수익과 직결되는 부분이 있는 것 같다. '오류 = 서비스 이탈'이라고 불러도 어색하지 않다. 위키에서는 브라우저의 문제로 보인다고 정의를 하고 있었다.</p>\n<ul>\n<li>브라우저는 웹 페이지의 마크업에서 참조된 모든 부수적인 파일들을 모아 그 즉시 DOM을 빌드한다.</li>\n<li>브라우저는 처음으로 표시할 가장 빠르게 분석할 수 있는, 즉 글의 내용을 골라 먼저 화면에 표시한다.</li>\n<li>화면에 표시된 내용에 마크업의 순서에 따라 스타일을 적용하고 스크립트를 실행한다.</li>\n</ul>\n<p>이건 브라우저 렌더링 과정이다. 조금 더 <a href=\"https://d2.naver.com/helloworld/59361\">자세하게 정리</a>해보면 아래와 같다.</p>\n<ol>\n<li>렌더링 엔진은 HTML 문서를 파싱한다.</li>\n<li>콘텐츠 트리 내부에서 태그를 DOM 노드로 변환한다.</li>\n<li><strong>그 다음</strong> 외부 CSS 파일과 함께 포함된 스타일 요소도 파싱한다.</li>\n<li>스타일 정보와 HTML 표시 규칙은 \"렌더 트리\"라고 부르는 또 다른 트리를 생성한다.</li>\n<li>렌더 트리는 색상 또는 면적과 같은 시각적 속성이 있는 사각형을 포함하고 있는데 정해진 순서대로 화면에 표시된다.</li>\n<li>렌더 트리 생성이 끝나면 배치가 시작된다. 각 노드가 화면의 정확한 위치에 표시되는 것을 의미한다. UI 백엔드에서 렌더 트리의 각 노드를 가로지르며 형상을 만들어 내는 그리기 과정이다.</li>\n<li><strong>일련의 과정들이 점진적으로 진행된다는 것을 아는 것이 중요하다.</strong></li>\n</ol>\n<p><a href=\"https://web.dev/critical-rendering-path-render-blocking-css/\">CSS는 렌더링 차단 리소스</a>로 처리된다. <a href=\"https://web.dev/critical-rendering-path/\">CRP(Critical Rendering Path)</a>과정 중 렌더 트리를 그리려면 DOM과 CSSOM 둘다 필요하기 때문에 CSS가 불러와지지 않았거나 CSSOM이 그려지지 않으면 화면이 그려지지 않는다. 그렇다면 좀 이상하다. CSS가 렌더링 차단 리소스라면 FOUC가 발생하지 말아야한다. 그런데 발생을 하고 있다. 심지어 <a href=\"https://stackoverflow.com/questions/53220261/if-css-is-render-blocking-why-do-we-see-fouc\">나랑 똑같은 질문을 한 사람도 있다</a>. 하지만 발생 원인에 대해서 몇몇 글을 읽었지만 딱히 속 시원하게 설명하는 글을 아직까지 찾을 수가 없었다.</p>\n<blockquote>\n<p>참고<br>\nFOUC<br>\n<a href=\"https://ko.wikipedia.org/wiki/FOUC\">FOUC - 위키백과</a><br>\n<a href=\"https://github.com/im-d-team/Dev-Docs/blob/master/Browser/FOUC.md\">FOUC(Flash of Unstyled Content)</a><br>\nCRP<br>\n<a href=\"https://web.dev/critical-rendering-path-render-blocking-css/\">CSS는 렌더링 차단 리소스</a><br>\n<a href=\"https://web.dev/critical-rendering-path/\">CRP(Critical Rendering Path)</a><br>\n브라우저 동작<br>\n<a href=\"https://d2.naver.com/helloworld/59361\">브라우저는 어떻게 동작할까 - Naver D2</a><br>\n<a href=\"https://yozm.wishket.com/magazine/detail/1338/\">프론트엔드 개발자라면 알고 있어야 할 브라우저의 동작 과정</a></p>\n</blockquote>\n<h2>해결책은 SSR?</h2>\n<p>구글에서 바로 <a href=\"https://medium.com/@mikaelagurney/removing-fouc-in-a-gatsby-project-66034b8590b1\">해결 책</a>을 얻어서 코드에 적용했다. 하지만 FOUC는 없어지지 않았다. 정확히 말하자면 50%만 해결되었다. GlobalStyle이 나중에 적용되었고 여전히 FOUC가 발생하고 있었다. 그러다 <a href=\"https://www.youtube.com/watch?v=G_dVwrhvkBI\">유튜브에서 SSR</a>에 Globalstyle을 적용하면 된다고 하길래 그렇게 했다. 그리고 대 참사가 발생했다. 페이지를 불러오는데 7초나 걸렸다. 말이 안된다. 겨우 텍스트를 불러오는데 7초를 쓰다니!!</p>\n<p><img src=\"/srr_AdobeExpress.gif\" alt=\"7초 로딩 실화냐\"></p>\n<p>처음에는 SSR이 원인일 것이라고 생각도 못한채 하루 종일 갯츠비 최적화를 뒤적거렸다. 당장 화면에서 이미지를 불러오는 것이 느리니까 이미지를 StaticImage로 불러왔다가 또 스타일이 적용이 안돼서 왔다 갔다....</p>\n<p><img src=\"/ssr.png\" alt=\"ssr을 적용했더니 성능이\"></p>\n<p>성능 측정을 해보니 60점이 나왔다. 첫번째 컨텐츠를 불러오는 시간에서 가장 낮은 점수를 받았다. 그러다가 다른 사람이 만든 갯츠비 페이지를 가보았다. 대부분 개발자 페이지였는데 예전에 갯츠비를 처음 접할 때 김정환이라는 분의 유튭을 봤던 기억이 났다. 그래서 구글을 통해서 그분의 <a href=\"https://jeonghwan-kim.github.io/\">블로그</a>를 가보았다. 일단 컨텐츠를 불러오는 속도가 매우 빨랐다. FOUC도 없었다. 그래서 바로 깃헙으로 가서 코드를 살펴보았다.</p>\n<p>일단 SSR을 전혀 사용하지 않았다. gatsby-browser.js에서 root 컴포넌트를 만들지도 않았다. Layout에서 Globalstyle을 해당하는 컴포넌트 들에게 내려주고 있었다.</p>\n<p>당신이 오늘 접속한 나의 블로그에 FOUC가 없었다면 결론적으로 해결 됐다고 볼 수 있다. 성능 측정에 좋은 점수를 받은 것은 덤이다.</p>\n<p><img src=\"/copyblogcode.png\" alt=\"따라만들기 이후\"></p>\n<h2>마무리</h2>\n<p>공부를 하면서 느낀 점은 뭔가 기술의 이름은 다르지만 내부적으로는 교집합이 있는 것 같다. 예를 들어 브라우저 동작 방법은 SSR, HTTP와 연관이 있다. 그러니까 묶어서 정리를 하고 면접 질문에서 나오면 잘 대답해볼 수 있도록 해야겠다. 그냥 개별적으로 놓고보면 조각인데 모으고 나면 하나의 그림이 되는 느낌이다. FOUC를 보다가 브라우저 렌더링 과정을 다시한번 복습해볼 수 있었다. 그리고 성능 최적화 문제도 FOUC와 연관성이 있었다.</p>\n<p>블로그 FOUC까지 해결하고나니까 원티드 챌린지 과정을 끝난 것 같은 느낌이 든다. 하지만 느낌일 뿐 프리온보딩 챌린지는 아직 끝나지 않았다. 이제 이력서, 기업 지원, 기술 면접, 과제 등이 남아있다. '이걸 어떻게 넘나'라는 생각이 든다. 하지만 이번 기회를 통해 몰라서 안했던 부분을 알게 되었고 조금은 매꿀 수 있었다. 이렇게 누군가에게 배우는 과정은 매우 소중하다. 하지만 이제 떠먹여 주는 시간은 끝났다. 다시 내가 과제를 선정하고 해결하기 위해 메일도 보내보고 구글링을 하면서 시간을 보내야한다. 그러다 보면 언젠가는...</p>","frontmatter":{"date":"2022년 8월 22일","tags":["FOUC","gatsby","front-end"],"slug":"/나의_블로그와_FOUC","title":"나의 블로그에서 FOUC 없애기"}}},"pageContext":{}},"staticQueryHashes":["63159454"]}