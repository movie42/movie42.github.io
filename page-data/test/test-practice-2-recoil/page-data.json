{"componentChunkName":"component---src-templates-blog-post-js","path":"/test/test-practice-2-recoil","result":{"data":{"markdownRemark":{"html":"<p>Test 코드를 작성하는 방법은 <a href=\"https://velog.io/@velopert/tdd-with-react-testing-library\">velopert의 TDD 개발 흐름으로 투두리스트 만들기</a>와 <a href=\"https://www.youtube.com/playlist?list=PL4cUxeGkcC9gm4_-5UsNmLqMosM-dzuvQ\">The Net Nija의 React Testing Library</a> 튜토리얼을 따라하면서 작성하는 방법을 익혔다.</p>\n<p>React로 개발을 하다보면 다양한 library를 사용하게 된다. 대표적으로 상태 관리 도구를 사용하는 환경에서 React 상태를 관리하게 된다. 나는 Recoil을 사용하는 상태 관리 도구로 사용하는 환경에서 TDD를 하는 방법을 연습하였다.</p>\n<h2>Recoil 테스트</h2>\n<blockquote>\n<p>코드 참조<br>\n<a href=\"https://codesandbox.io/s/testing-recoil-fctje?file=/src/Message.tsx\">https://codesandbox.io/s/testing-recoil-fctje?file=/src/Message.tsx</a></p>\n</blockquote>\n<p>Recoil은 atom으로 개발자가 관리하려는 상태 값을 생성한다. 원자 단위로 상태를 관리한다는 의미에서 atom이라고 이름을 짓지 않았나 생각해본다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> atom <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"recoil\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">enum</span> State <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">TODO</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"todo\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">DONE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"done\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ToDo</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  state<span class=\"token operator\">:</span> State<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> todoState <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">atom</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ToDo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  key<span class=\"token operator\">:</span> <span class=\"token string\">\"todo\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>생성된 atom은 컴포넌트 안에서 useRecoilState라는 훅으로 사용할 수 있다. useState와 사용 방법이 똑같다. 다만 훅 안에는 초기값으로 내가 사용하려는 상태의 atom을 넣어 주어야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useRecoilState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"recoil\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> todoState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../atom/TodoState\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> TodoItem <span class=\"token keyword\">from</span> <span class=\"token string\">\"../TodoItem/TodoItem\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ITodoItemContainerProps</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoItemContainer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> setTodos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useRecoilState</span><span class=\"token punctuation\">(</span>todoState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">data-testid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>todo-list-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>todos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>todo <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TodoItem</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">todo</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> TodoItemContainer<span class=\"token punctuation\">;</span></code></pre></div>\n<p>atom은 renderHook을 사용해서 atom에 데이터가 입력이 잘 되는지 테스트 할 수 있다. 문제점은 넣으려는 데이터의 타입이 다르더라도 테스트 케이스는 통과하게 된다. 물론 타입스크립트에서 타입이 잘못 되었다고 에러를 표시해주긴한다. 아마도 타입이 다른 경우에는 타입 스크립트가 잘못되었다고 알려주기 때문에 타입까지 테스트를 시도하지 않아도 되는 것 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> renderHook <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@testing-library/react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> State <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../lib/interface/todoInterface\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> RecoilRoot<span class=\"token punctuation\">,</span> useSetRecoilState<span class=\"token punctuation\">,</span> useRecoilValue <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"recoil\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> todoState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../TodoState\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recoil state 상태 테스트\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">\"15251\"</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"달리기\"</span><span class=\"token punctuation\">,</span>\n    state<span class=\"token operator\">:</span> State<span class=\"token punctuation\">.</span><span class=\"token constant\">TODO</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> result <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">renderHook</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> setTodos <span class=\"token operator\">=</span> <span class=\"token function\">useSetRecoilState</span><span class=\"token punctuation\">(</span>todoState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setTodos</span><span class=\"token punctuation\">(</span>pre <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>pre<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>setTodos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token function\">useRecoilValue</span><span class=\"token punctuation\">(</span>todoState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      wrapper<span class=\"token operator\">:</span> RecoilRoot<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>전역 상태를 컴포넌트에서 테스트하기</h2>\n<p>전역 상태를 기반으로 컴포넌트를 만들면 상태를 컴포넌트에서 컴포넌트로 전달하지 않고 상태를 관리할 수 있다. 하지만 테스트를 할 때 다음과 같은 테스트 실패를 만나게 되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">● TodoItemContainer › TodoItemContainer에는 list가 출력되어야합니다.\n\n    TestingLibraryElementError: Unable to <span class=\"token function\">find</span> an element with the text: 달리기. This could be because the text is broken up by multiple elements. In this case, you can provide a <span class=\"token keyword\">function</span> <span class=\"token keyword\">for</span> your text matcher to <span class=\"token function\">make</span> your matcher <span class=\"token function\">more</span> flexible.\n\n    Ignored nodes: comments, <span class=\"token operator\">&lt;</span>script /<span class=\"token operator\">></span>, <span class=\"token operator\">&lt;</span>style /<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>ul /<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>/div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>/body<span class=\"token operator\">></span>\n\n      <span class=\"token number\">18</span> <span class=\"token operator\">|</span>     const <span class=\"token punctuation\">{</span> getByText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> renderTodoList<span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token number\">19</span> <span class=\"token operator\">|</span>\n    <span class=\"token operator\">></span> <span class=\"token number\">20</span> <span class=\"token operator\">|</span>     getByText<span class=\"token punctuation\">(</span><span class=\"token string\">\"달리기\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token operator\">|</span>     ^\n      <span class=\"token number\">21</span> <span class=\"token operator\">|</span>   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token number\">22</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token number\">23</span> <span class=\"token operator\">|</span></code></pre></div>\n<p>TodoItemContainer는 TodoItem 컴포넌트를 list item으로 출력한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useRecoilState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"recoil\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> todoState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../atom/TodoState\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ToDo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../lib/interface/todoInterface\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> TodoItem <span class=\"token keyword\">from</span> <span class=\"token string\">\"../TodoItem/TodoItem\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ITodoItemContainerProps</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TodoItemContainer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> setTodos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useRecoilState</span><span class=\"token punctuation\">(</span>todoState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> handleRemoveItem <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> ToDo<span class=\"token punctuation\">[</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTodos</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pre</span> <span class=\"token operator\">=></span> pre<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>id <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">data-testid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>todo-list-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>todos<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TodoItem</span></span>\n          <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">todo</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>todo<span class=\"token punctuation\">}</span></span>\n          <span class=\"token attr-name\">handleRemoveItem</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleRemoveItem<span class=\"token punctuation\">}</span></span>\n        <span class=\"token punctuation\">/></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> TodoItemContainer<span class=\"token punctuation\">;</span></code></pre></div>\n<p>하지만 터미널에 출력된 스냅샷을 보면 item이 출력되지 않았다. 아마도 test 환경에서 todos가 무엇인지 잘 모르는 것 같았다. 처음에 beforeAll을 사용해서 renderHook을 사용해 값을 넣어주면 todos가 어떤 것인지 이해할 수 있을 줄 알았지만 여전히 계속 실패했다. 그러던 와중에 깃헙에서 <a href=\"https://github.com/saseungmin\">saseungmin</a>의 코드를 보게 되었다.</p>\n<blockquote>\n<p>코드 참조<br>\n<a href=\"https://github.com/saseungmin/Recoil_ToDo\">saseungmin/Recoil_ToDo</a></p>\n</blockquote>\n<p>코드를 보니 상태 값을 Injection하는 컴포넌트를 먼저 넣고 테스트를 하는 것을 발견했다. 그래서 나도 똑같이 따라 만들었다.</p>\n<ol>\n<li>먼저 InjectTestingRecoilState.tsx를 작성한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useSetRecoilState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"recoil\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> todoState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../atom/TodoState\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ToDo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../lib/interface/todoInterface\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IInjectTestingRecoilStateProps</span> <span class=\"token punctuation\">{</span>\n  todos<span class=\"token operator\">:</span> ToDo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">InjectTestingRecoilState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  todos<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> IInjectTestingRecoilStateProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> setTodos <span class=\"token operator\">=</span> <span class=\"token function\">useSetRecoilState</span><span class=\"token punctuation\">(</span>todoState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTodos</span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> InjectTestingRecoilState<span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>그 후에 TodoItemContainer.test.tsx를 작성한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> fireEvent<span class=\"token punctuation\">,</span> render <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@testing-library/react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> RecoilRoot <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"recoil\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> InjectTestingRecoilState <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../../Common/InjectTestingRecoilState\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> State<span class=\"token punctuation\">,</span> ToDo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../../lib/interface/todoInterface\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> TodoItemContainer <span class=\"token keyword\">from</span> <span class=\"token string\">\"../TodoItemContainer\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">TodoItemContainer</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> todos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"달리기\"</span><span class=\"token punctuation\">,</span> state<span class=\"token operator\">:</span> State<span class=\"token punctuation\">.</span><span class=\"token constant\">TODO</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">renderTodoItemContainer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>todos<span class=\"token operator\">:</span> ToDo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">InjectTestingRecoilState</span></span> <span class=\"token attr-name\">todos</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>todos<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TodoItemContainer</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> wrapper<span class=\"token operator\">:</span> RecoilRoot <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TodoItemContainer에는 list가 출력되어야합니다. 리스트에는 todo 제목과 버튼이 있어야합니다.\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getByText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">renderTodoItemContainer</span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"달리기\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLLIElement<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"삭제\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLButtonElement<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"삭제 버튼을 누르면 선택된 아이템이 삭제되어야합니다.\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> getByText <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">renderTodoItemContainer</span><span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> removeButton <span class=\"token operator\">=</span> <span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"삭제\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLButtonElement<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> li <span class=\"token operator\">=</span> <span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"달리기\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLLIElement<span class=\"token punctuation\">;</span>\n    fireEvent<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>removeButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>테스트 케이스를 통과했다.</p>\n<h2>마무리</h2>\n<p>이번에는 Recoil이라는 상태 도구를 사용하는 환경에서 테스트를 진행해보았다. 아직 매우 초보 수준의 테스트다. 연습을 하면서 다른 개발자의 코드를 보고 나는 아직도 배워야할게 많구나 하는 생각이 든다.</p>\n<p>다음에는 비동기 테스팅을 진행해보려고 한다. 또 어떤 해결 과제들이 나를 기다리고 있을지 모르겠다. 가끔 구글에서 해결 방법을 찾아도 잘 나오지 않을 때 한숨이 나오긴 한다. 그래도 어디엔가 선구자가 있을 것이라고 생각한다. 시간이 지난 뒤 먼 미래에 내가 다른 사람들 보다 먼저 길을 닦아 놓는 역할을 할 수 있다면 좋겠다.</p>\n<h2>참조</h2>\n<ol>\n<li><a href=\"https://velog.io/@velopert/tdd-with-react-testing-library\">velopert의 TDD 개발 흐름으로 투두리스트 만들기</a></li>\n<li><a href=\"https://www.youtube.com/playlist?list=PL4cUxeGkcC9gm4_-5UsNmLqMosM-dzuvQ\">The Net Nija의 React Testing Library</a></li>\n<li><a href=\"https://github.com/saseungmin/Recoil_ToDo\">saseungmin/Recoil_ToDo</a></li>\n<li><a href=\"https://codesandbox.io/s/testing-recoil-fctje?file=/src/Message.tsx\">https://codesandbox.io/s/testing-recoil-fctje?file=/src/Message.tsx</a></li>\n</ol>","frontmatter":{"date":"2022년 6월 04일","tags":["test","basic","summary","react","front-end"],"slug":"/test/test-practice-2-recoil","title":"React Testing Library 연습(2) - Recoil과 테스트"}}},"pageContext":{}},"staticQueryHashes":["63159454"]}