{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"allMarkdownRemark":{"group":[{"fieldValue":"FOUC","totalCount":1,"edges":[{"node":{"frontmatter":{"slug":"/나의_블로그와_FOUC","date":"2022년 8월 22일","title":"나의 블로그에서 FOUC 없애기","tags":["FOUC","gatsby","front-end"]},"excerpt":"결론부터 말합니다. TLDL; 아래 글은 저의 일기와 같은 형식으로 되어있습니다. 해결 과정이 궁금하면 읽으세요. 제가 찾은 해결 방법만 적용하고 싶다면 이 파트만 읽으세요. 참조 Removing FOUC in a Gatsby Project install package FOUC는 스타일 컴포넌트 문제일 수도 있고 @import를 사용하여 불러온 웹 폰트 때문일 수도 있습니다. styled-components 때문이라면\n, , , @import된 font 때문이라면\n, ,  둘 다라면 둘 다 설치 setup gatsby-config.js typography 경로를 src/utils/typography로 설정했습니다. setup layout with Globalstyle Globalstyle @import를 삭제하세요. layout 레이어 아웃에 적용 후 용도별로 서브 레이어아웃을 만들어서 반드시 각각 page 컴포넌트에 적용해주어야합니다. 참조 jeonghwan-kim…","id":"b29a24b3-667a-506c-91f5-67c5c11864a8"}}]},{"fieldValue":"ajax","totalCount":3,"edges":[{"node":{"frontmatter":{"slug":"/ajax-with-javascript","date":"2021년 11월 19일","title":"자바스크립트로 비동기를 처리하는 방법","tags":["ajax","javascript"]},"excerpt":"자바스크립트 공부하다 비동기를 처리하는 방법에 XMLHttpRequest라는 것을 만나게 됐다. 나는 async/awiat을 써왔기 때문에 이게 뭔가 싶었다. 갑자기 fetch는 무엇이고 Promise는 무엇인지 햇갈렸다. fetch가 있는데 갑자기 XMLHttpRequest는 뭐지? fetch는 Promise 기반이라고 하는데 그럼 fetch와 Promise의 역할이 뭐지? 서로 같은건가? async/awiat와 fetch를 함께 쓰는데 async/await는 Promise…","id":"eb1ca7fa-0903-51cc-9ee9-75a1dd90417d"}},{"node":{"frontmatter":{"slug":"/form-validation","date":"2021년 11월 12일","title":"Form Validation","tags":["ajax","javascript","validation","form"]},"excerpt":"폼을 검증하는 것은 사용자 경험에 좋은 영향을 준다. 회원가입이나 로그인을 할 때, 서식 쓰기를 거부하거나 회원 인증을 거부하면 왜 그런지 이유를 알려주어야한다. 그러지 않을 경우 사용자는 미궁속에 빠지게 될 것이다. 이전에 서식 검증 코드를 만들었지만 코드가 작동만 할 뿐이었다. 그래서 서식 검증 코드를 조금 손봐서 다시 작성하기로 했다. 기존의 서식 검증 코드는 프론트에서 글자수나 필수적으로 들어가야하는 문자에 대해서만 검증을 했다. 회원 가입 버튼을 눌렀을 때, 백앤드에서 아이디 중복이나 비밀번호 검증을 했다. 하지만 이 절차가 매우 불편했다. 왜냐하면 사용자가 이메일을 입력했을 때, 사용할 수 있다고 알려주었는데 회원 가입 버튼을 누르자 다시 이메일이 중복된다는 메시지를 프론트에 출력했기 때문에 사용자가 두 번 일을 해야했기 때문이다. 게다가 switch…","id":"a82b33d6-b2ba-58eb-bbcf-87f0c1806a8c"}},{"node":{"frontmatter":{"slug":"/validation-in-front-end","date":"2021년 9월 02일","title":"Front에서 양식 검증하기","tags":["ajax","javascript","validation"]},"excerpt":"다시 컴퓨터에 앉았다. 저번 구상대로 모든 것을 싹 바꾸기로 했다. 일단 프론트에서 회원가입 양식을 받아서 값을 먼저 검증하기로 했다. 그래서 기존에 회원 가입 양식을 확인하는 절차를 만들었다. 저번에 구상했던 것을 전부 뒤집어 엎었지만 지금이 코드 가독성이나 작동 측면이나 모든 면에서 훨씬 좋은 것 같다. 괜히 sessionStorage를 사용하지 않아도 된다. 일단 document에서 input값을 불러오는 것을 내가 반복하기가 너무 싫었다.(나는 게으르니까...) 그래서 querySelectAll을 사용해서 input을 전부 불러오기로 했다. 그럼 유사 배열로 input을 전부 불러올 수 있다. 만든 객체를 checkJoinData에 넘겨주고나면 객체 값을 검증하는 함수를 짰다. 최대한 반복을 피하고 싶었다. 그런데 왜 함수가 결국 거기서 거기인 것 같을까. 어쨌든 객체에 저장된 키 값을 각각 email, name, username, password…","id":"bca4fe98-1f3e-5f6f-b8c5-d145ab730647"}}]},{"fieldValue":"animation","totalCount":1,"edges":[{"node":{"frontmatter":{"slug":"/scroll-animation-velog","date":"2022년 1월 26일","title":"스크롤 애니메이션으로 velog 메뉴 흉내내기","tags":["javascript","animation"]},"excerpt":"스크롤 애니메이션은 말 그대로 인터넷 브라우저의 스크롤을 사용하여 타이밍을 설계해서 유저에게 컨텐츠를 보여주는 애니메이션이다. 스크롤 애니메이션은 사용자에게 시각적으로 보다 더 다양한 경험을 제공할 수 있다. 화면이 로딩 됨과 동시에 컨텐츠가 보여지는 것이 아니고 동영상 플레이어를 재생할 때, 타임 라인을 탐색 하는 듯한 경험을 제공할 수 있다. 나는 애플 클론 수업을 수강하면서 배운 스크롤 애니메이션을 메뉴바에 적용하기로 했다. UX…","id":"cab6aa38-db40-52ab-a28d-b194de710397"}}]},{"fieldValue":"basic","totalCount":3,"edges":[{"node":{"frontmatter":{"slug":"/test/test-practice-2-recoil","date":"2022년 6월 04일","title":"React Testing Library 연습(2) - Recoil과 테스트","tags":["test","basic","summary","react","front-end"]},"excerpt":"Test 코드를 작성하는 방법은 velopert의 TDD 개발 흐름으로 투두리스트 만들기와 The Net Nija의 React Testing Library 튜토리얼을 따라하면서 작성하는 방법을 익혔다. React로 개발을 하다보면 다양한 library를 사용하게 된다. 대표적으로 상태 관리 도구를 사용하는 환경에서 React 상태를 관리하게 된다. 나는 Recoil을 사용하는 상태 관리 도구로 사용하는 환경에서 TDD를 하는 방법을 연습하였다. Recoil 테스트 코드 참조 https://codesandbox.io/s/testing-recoil-fctje?file=/src/Message.tsx Recoil은 atom으로 개발자가 관리하려는 상태 값을 생성한다. 원자 단위로 상태를 관리한다는 의미에서 atom이라고 이름을 짓지 않았나 생각해본다. 생성된 atom은 컴포넌트 안에서 useRecoilState라는 훅으로 사용할 수 있다. useState…","id":"305b5e2d-d9e4-5364-89c4-1cf0683f51c9"}},{"node":{"frontmatter":{"slug":"/test/test-practice-1","date":"2022년 5월 31일","title":"React Testing Library 연습 (1) - 테스트 익숙해지기","tags":["test","basic","summary","react","front-end"]},"excerpt":"테스트 코드가 필요하다고 생각하게 된 계기는 어플리케이션의 상태를 내가 눈으로 직접 확인하며고 일일이 클릭해가면서 동작을 예측하는데 한계가 왔다고 느꼈기 때문이다. 이전부터 테스트가 있다는 것은 알았고 유튜브에서 떠도는 동영상을 봤지만 실상 내가 하는 프로젝트에서 테스트 코드를 작성하면서 개발을 진행하지 않았다. 세팅도 어렵게 느껴졌고 무엇보다 ‘무엇을 테스트 해야할까?’를 잘 몰랐다. 하지만 테스트가 정말 필요해진 시점에서 더이상 미룰 수가 없었다. 그래서 자료를 이것 저것 찾아보면서 테스트의 기초적인 것을 보게 되었고 먼저 테스트 코드를 작성하는 것에 익숙해지기로 했다. 읽기 전에 이 글은 튜토리얼이 아니며 다른 튜토리얼을 보고 배운 것을 정리한 글입니다. 튜토리얼은 테스트에 익숙해지기 좋은 자료를 참고하는 것을 권장합니다. 저의 개인적인 생각이 포함되어있습니다.(학술적이지 않음.) 테스트에 익숙해지기에 좋은 자료 The Net Ninja - React Testing…","id":"8151a3f9-2a91-58ab-8265-851aaccf30a3"}},{"node":{"frontmatter":{"slug":"/typescript/basic-summary","date":"2022년 5월 20일","title":"Typescript 기본 정리","tags":["typescript","basic","summary"]},"excerpt":"참고한 글과 강의 노마드 코더 타입스크립트로 블록체인 만들기 타입스크립트 핸드북(joshua1988) 타입추론 타입스크립트 도큐멘테이션 기록의 힘 [TypeScript] 타입스크립트 함수 오버로딩 : Function Overloading 토스트 UI 타입스크립트의 Never 타입 완벽 가이드 Types vs. interfaces in TypeScript Type vs Interface…","id":"18fd1747-5fd1-5033-aa29-75444e3b95e6"}}]},{"fieldValue":"cookie","totalCount":1,"edges":[{"node":{"frontmatter":{"slug":"/http/cooki-and-session","date":"2022년 1월 02일","title":"쿠키와 세션","tags":["web","cookie","session"]},"excerpt":"기본적인 웹 보안을 공부하다가 갑자기 쿠키로 다시 오게 되었다. 내가 알고 있는 지식이 하나의 파편 조각처럼 흩어져 있을 뿐 연결이 제대로 되지 않는 기분이다. 어쨌든 쿠키와 세션이 무엇인지 역할은 무엇인지 기능적으로 어떻게 작동하는지 등을 이참에 정리하기로 마음먹었다. 쿠키 학습 방향 쿠키가 뭘까? 쿠키는 왜 생겼을까? 쿠키가 없다면? 쿠키는 어떻게 동작할까? NodeJS 환경에서 ExpressJS를 활용해 쿠키를 만드는 방법 다루지 않는 것\n쿠키의 종류\n쿠키와 관련된 보안 이슈\n참조에 한국 인터넷 진흥원의 인터넷사이트 쿠키(Cookie)의 주요 이슈 및 취약점 분석을 읽어보기를 바란다. 쿠키란? 쿠키는 HTTP…","id":"65055b9c-f23d-51f4-9d22-dfe6096db0d9"}}]},{"fieldValue":"custom hook","totalCount":1,"edges":[{"node":{"frontmatter":{"slug":"/react/custom-hook-useFetch","date":"2022년 3월 31일","title":"useFetch 만들기","tags":["javascript","react","custom hook","useFetch"]},"excerpt":"useFetch는 만들어 놓으면 사용할 때가 많아서 편리하다. React에서 서버와 비동기로 데이터를 주고 받는 경우가 많기 때문이다. useFetch가 없다면 비동기로 데이터를 주고 받을 때마다 복잡한 코드를 계속 작성해야한다. 불필요한 반복을 제거하기 위해서 useFetch를 만들었다. 처음에는 GET만 됐다. 하지만 POST, DELETE같은 다른 method에서도 사용이 가능해야했다. useFetch를 범용으로 만든 과정을 기록한다. 아울러 Typescript를 함께 사용하면서 오류를 해결한 과정도 함께 기록한다. GET부터 천천히 useFetch가 GET에서만 동작한다면 그다지 복잡하지 않다. 구글링만 잘 해도 수많은 예제가 나온다. 사실 useState, useEffect만 잘 활용해도 쉽게 만들 수 있다. 만들면서 Typescript에서 빨간색 밑줄이 쳐질때 interface로 type…","id":"e3631357-c549-5bf2-8340-5fded6bd1963"}}]},{"fieldValue":"error","totalCount":1,"edges":[{"node":{"frontmatter":{"slug":"/react/invalid-hook-call","date":"2022년 3월 22일","title":"Styled Components와 Invalid Hook Call","tags":["javascript","react","error"]},"excerpt":"invalid-hook-call-error 요즘 React로 이것저것 만들어보기 시작했다. 그러다 만나게 된 Error가 생겼다. 그런데 Error가 일관적으로 발생하는 것이라면 납득이 될텐데 조금 이상한 경우라서 기록을 하기로 했다. 먼저 Error 발생의 원인을 찾은 순서와 해결한 방법을 이야기하려고 한다. 그 다음에 Invalid Hook Call이 무엇인지 그리고 React 공식 문서에서는 어떤 해결책을 제시하고 있는지 마지막에 기록했다. 컴퓨터에 따라 Error가 나왔다 안나왔다. 나는 두 대의 컴퓨터를 사용한다. Apple Macbook Air M1 Apple iMac Intel 문제 M1에서 계속 Invalid 에러가 발생했다. 처음 Create React App으로 개발 환경을 세팅했을 때는 오류가 발생하지 않았기 때문에 패키지에서 발생하는 오류라고 추론했다. 패키지를 하나씩 지우면서 Styled-Components, createGlobalStyle…","id":"168dcd25-79d8-586a-bc75-7c8435beb451"}}]},{"fieldValue":"etc","totalCount":8,"edges":[{"node":{"frontmatter":{"slug":"/review/refactoring1","date":"2022년 8월 18일","title":"API 호출 함수 대수술","tags":["리펙토링","관심사 분리","etc"]},"excerpt":"대수술이었다. 약 10시간 정도 걸렸다. 이 일을 한 발단은 원티드 프리 온보딩 코스를 들으면서 관심사의 분리를 듣고 시작했다. 할 일 목록 생성 어플을 만들다가 내 프로젝트에 일괄적으로 적용해봐도 괜찮겠다 싶었다. 나의 코드를 열어서 다시 보는 순간 분명 약 1개월 정도밖에 되지 않은 코드인데 썩은 내가 나는 것 같았다. 무슨 의도로 이렇게 난해하게 작성을 했는지 모르겠다. 아마 그때 당시에는 ‘동작’하니까 이렇게 작성했을 것 같다. 만약에 이게 회사였다면 PR 승인도 못받았을 것 같은 느낌적인 느낌. 이번 리펙토링의 큰 줄기는 관심사의 분리다. 그리고 세부적으로 API를 호출하는 함수와 뷰를 최대한 분리하였다. 마침 몇개월 전에 스프린트를 끝내면서 이슈를 하나 남겨놓았었다. 그때도 이 부분이 고민이긴 했나보다. 불분명한 이름 변경하기 아래 코드는 서버에 Get 요청을 위해서 만들어진 코드다. 제네릭 타입을 지정할 때, T…","id":"d1d34086-74c1-5c80-8956-9422df9c29b4"}},{"node":{"frontmatter":{"slug":"/review/diary-4","date":"2022년 7월 02일","title":"양청 플젝 회고","tags":["개발일기","회고","etc"]},"excerpt":"내 기준으로 3번째 스프린트가 끝났다. 프로젝트 회고를 스프린트로 나눈 이유는 아직 모든 기능이 완성된 것이 아니기 때문이다. 너무 큰 덩어리로 프로젝트를 바라보니까 지치는 것 이상으로 개발 효율이 나지 않았다. 그래서 나름 스프린트 단위로 나눠서 기획과 디자인, 개발을 한 사이클로 정해서 프로젝트를 진행하기로 했다. 테스트까지 포함 되어야하는데 테스트가 계속 생략되고 있다. 어쨌든… 각설하고 프로젝트를 스프린트 단위로 3번까지 진행을 하면서 어떤 것을 배웠었는지 다시 한번 상기하기 위해 회고록을 작성한다. 스프린트…","id":"a830d87b-5b9e-5075-8af6-2937bd24fde2"}},{"node":{"frontmatter":{"slug":"/review/diary-3","date":"2022년 4월 26일","title":"4월 26일 개발 일기","tags":["개발일기","etc"]},"excerpt":"TLDR 주절주절이라 해결 방법을 구하려는 분께는 별 도움 안되는 아티클입니다. 리액트로 리빌딩하기 React로 뭘 만들어보자고 하고 이전에 바닐라 자바스크립트로 만들었던 웹 앱을 리액트로 다시 만들었다. 먼저 하고 있는 서비스를 정상적으로 동작 시키기까지 많은 우여 곡절이 있었다. 쿠키와 Same Site 옵션 일단 쿠키에서 문제가 발생했다. CSRF 공격을 예방하기 위해서 토큰을 사용했었다. 히로쿠에서 클라이언트와 서버를 따로 만들어서 동작을 시키자 동작을 하지 않았다. 쿠키를 정상적으로 주고받지 못했기 때문이었다. 경고 메시지를 보면 Same Site 옵션이 문제였다. 브라우저에서 Same Site가 true이거나 lax이면 도메인이 다른 서버에서 클라이언트에 쿠키를 발행해주지 않았다. 그래서 옵션을 none으로 변경했고 잘 동작하는 줄 알았다. 그런데 로컬에서만 동작하고 배포 환경에서는 동작하지 않았다. 이것 저것 찾아보다보니 유튜브에서 🎥라매개발자의 Heroku…","id":"a246808c-cb50-5b8c-b025-f92819c9bea8"}},{"node":{"frontmatter":{"slug":"/etc/kiosk-team-project-2","date":"2022년 4월 05일","title":"프로젝트를 하면서 겪은 문제, Typescript와 StyledComponent, Event, Component 설계하기","tags":["team project","etc"]},"excerpt":"매력적인 제목을 짓지 못해 라이트 노벨과 같은 제목처럼 길게 썼다. 3일차까지 하면서 겪은 문제를 한번 정리하고 넘어가야겠다고 생각해서 거의 회고와 같은 형식으로 적는다. 쓰면 쓸 수록 좋으면서도 싫은 TypeScript 타입 스크리트는 전달받을 객체가 무엇인지 예측 할 수 있기 때문에 생각보다 실수를 할일이 적어진다. 또 다른 한편으로 상태를 내가 생각하면서 설계를 하기 때문에 코드를 조금 더 생각하면서 작성하게 되는 것 같다. 예상치 못한 상태를 받는 경우 빨간줄이 쳐지는데 그럴 때, 메시지를 잘 읽어보면 왜 오류가 났는지 잘 설명해준다. 그런데 항상 설명을 보았다고 바로 해결할 수는 없다. 대부분의 오류는 어떤 interface나 type을 상속받고 있는데 그곳에 undefiened나 null…","id":"4cb3dd86-82ac-526d-992d-90fbbccd01c5"}},{"node":{"frontmatter":{"slug":"/etc/kiosk-team-project-1","date":"2022년 4월 03일","title":"누구나 키오스크 팀 프로젝트 시작","tags":["team project","etc"]},"excerpt":"팀 프로젝트를 시작했다. 감사하게도 프론트앤드 개발하시는 분이 한분 합류해주셨다. 아쉽게도 백앤드 팀원을 구하지 못해서 해야 할 일이 배로 늘게 되었지만 어차피 지금까지 배웠던 것을 복습한다고 생각하고 처음부터 진행하기로 했다. 백앤드 개발자는 구해지는 대로 협의를 하여서 맡기기로 했다. 프로젝트 세팅하기 프로젝트 세팅은 생각보다 시간이 많이 걸렸다. 약 10시간정도의 시간을 가지고 프로젝트를 세팅했다 처음 세팅하는 것이기 때문에 구글에서 이것 저것 찾아보면서 세팅을 했다. 설계 Figma를 사용해서 기본 틀을 그렸다. 구성은 로그인화면 관리자 화면, 고객 화면, 상품 관리 화면, 크루 화면으로 나눴다. 피자 배달을 하면서 불편했던 점을 반영하려고 했다. 피그마를 사용하면서 component 단위로 설계할 수 있어서 정말 편했다. 복잡한 디자인이 아니라면 프론트 앤드 개발자라면 쉽게 사용할 수 있었다. Git git…","id":"edb5cdbe-82dc-51d9-89e7-9f65da47d02f"}},{"node":{"frontmatter":{"slug":"/review/diary-2","date":"2022년 3월 29일","title":"맨탈을 관리하는 가장 좋은 방법","tags":["개발일기","etc"]},"excerpt":"맨탈 바사삭 매우 기념비적인 날이다. 지금까지 지원했던 모든 회사에서 탈락했다. 50군데 정도 된다. 맨탈이 바사삭 부서지는 소리가 들리지만 지금 하는 것을 멈출수는 없다. 지금 하는 것을 꾸준하게 계속 해서 결과물을 만드는 것이 좋은 정신 상태를 유지하는 가장 좋은 방법인 것 같다. 50군데 떨어졌다면 답은 나왔다. 이력서를 수정해야한다. 내가 제출한 포트폴리오가 그다지 매력적이지 않은 것도 덤이다. 이번에 2라운드를 준비하면서 내가 기술로 해결하고 싶은 문제가 무엇인지 곰곰히 생각해보는 시간을 가져야겠다. 사무 자동화로 다른 사람의 시간을 아껴주었을 때 즐거움이 이번 프로젝트에서 드러났으면 좋겠다. 지금 하고 있는 것 지금은 과거에 바닐라 자바스크립트로 만들었던 웹 페이지를 리액트와 타입스크립트를 사용해서 새로 마이그레이션 하고 있다. 백앤드 서버는 그대로 두고(사실 그대로 둘 수가 없다. 엉망 진창이다.) 프론트를 만들어서 디폴로잉까지 할 예정이다. REST API 이미 MVC…","id":"07b82038-c3ae-564d-808c-ce8859615161"}},{"node":{"frontmatter":{"slug":"/review/diary-1","date":"2022년 3월 23일","title":"3월 23일 개발일기","tags":["개발일기","etc"]},"excerpt":"Gatsby로 개인 블로그 만들기 Gatsby를 사용해서 블로그를 만들었다. 나의 의도를 표현하기 위해서는 작은 서비스를 만들어보는 것이 가장 좋은 것 같다. 추상적으로 누군가에게 \"React로 서비스를 만들 수 있습니다.\"라고 말하는 것보다 직접 만들어보는 것이 나에게 도움이 많이 되는 것 같다. 너무 당연한 이야기이지만 지금까지 너무 이론에만 치중해있었던게 아닌가하는 생각이 들었다. 만들면서 겪은 작은 시행착오들이 나를 돌아보게 하는 것 같다. 이력서 블로그를 만들었으니 이제 이력서를 수정해야한다. 지금까지 이력서를 40군데 정도 넣었다. 감사하게도 관심을 가지고 면접을 제안하는 기업도 있었다. 하지만 과제 면접은 두 곳밖에 보지 못했다. 한번도 사용해본적 없는 Vue를 사용해서 과제를 제출해봤다. 또 바닐라 자바스크립트로 SPA 어플리케이션을 만들어보기도 했다. 만들면서 많은 공부가 됐다. 옵저버 패턴이란 것도 공부해보고 Proxy…","id":"d497e021-aeef-5485-a934-994bd6772444"}},{"node":{"frontmatter":{"slug":"/learn-about-toast-ui-editor","date":"2021년 11월 08일","title":"TOAST UI EDITOR를 붙이면서 배운것들","tags":["toast ui editor","how to","etc"]},"excerpt":"에디터를 붙이면서 도움이 됐던 글들 토스트 에디터 관련 tui.editor/app/editor 깃허브 저장소 에디터 문서\nTOAST UI Monthly 2021년 10월호 토스트 뷰어 관련 tui.editor/app/editor 깃허브 저장소 에디터 뷰어 문서\n에디터 뷰어 API XSS 취약점과 토스트 에디터를 선택한 이유 오픈 소스로 제공하는 텍스트 에디터가 많다. 처음에는 커스텀으로 처음부터 만들어보려고 했는데 XSS 취약점에 관련된 이슈가 리치 텍스트 에디터(위지윅)에 심각하다는 것을 알게 되었다. 그래서 해당 이슈를 최소한으로 할 수 있는 에디터를 찾다가 토스트 UI 에디터를 선택하게 되었다. 업데이트 내용\nTOAST UI Monthly 2021년 10월호 월간 토스트 UI 2021년 10월호를 보면 XSS 취약점을 개선하기 위해서DOMPurify를 적용했다고 한다. DOMPuryfiy DOMPuryfiy는 XSS…","id":"8db559d5-8135-5389-aa54-5a9ef0d0e236"}}]},{"fieldValue":"form","totalCount":1,"edges":[{"node":{"frontmatter":{"slug":"/form-validation","date":"2021년 11월 12일","title":"Form Validation","tags":["ajax","javascript","validation","form"]},"excerpt":"폼을 검증하는 것은 사용자 경험에 좋은 영향을 준다. 회원가입이나 로그인을 할 때, 서식 쓰기를 거부하거나 회원 인증을 거부하면 왜 그런지 이유를 알려주어야한다. 그러지 않을 경우 사용자는 미궁속에 빠지게 될 것이다. 이전에 서식 검증 코드를 만들었지만 코드가 작동만 할 뿐이었다. 그래서 서식 검증 코드를 조금 손봐서 다시 작성하기로 했다. 기존의 서식 검증 코드는 프론트에서 글자수나 필수적으로 들어가야하는 문자에 대해서만 검증을 했다. 회원 가입 버튼을 눌렀을 때, 백앤드에서 아이디 중복이나 비밀번호 검증을 했다. 하지만 이 절차가 매우 불편했다. 왜냐하면 사용자가 이메일을 입력했을 때, 사용할 수 있다고 알려주었는데 회원 가입 버튼을 누르자 다시 이메일이 중복된다는 메시지를 프론트에 출력했기 때문에 사용자가 두 번 일을 해야했기 때문이다. 게다가 switch…","id":"a82b33d6-b2ba-58eb-bbcf-87f0c1806a8c"}}]},{"fieldValue":"front-end","totalCount":4,"edges":[{"node":{"frontmatter":{"slug":"/나의_블로그와_FOUC","date":"2022년 8월 22일","title":"나의 블로그에서 FOUC 없애기","tags":["FOUC","gatsby","front-end"]},"excerpt":"결론부터 말합니다. TLDL; 아래 글은 저의 일기와 같은 형식으로 되어있습니다. 해결 과정이 궁금하면 읽으세요. 제가 찾은 해결 방법만 적용하고 싶다면 이 파트만 읽으세요. 참조 Removing FOUC in a Gatsby Project install package FOUC는 스타일 컴포넌트 문제일 수도 있고 @import를 사용하여 불러온 웹 폰트 때문일 수도 있습니다. styled-components 때문이라면\n, , , @import된 font 때문이라면\n, ,  둘 다라면 둘 다 설치 setup gatsby-config.js typography 경로를 src/utils/typography로 설정했습니다. setup layout with Globalstyle Globalstyle @import를 삭제하세요. layout 레이어 아웃에 적용 후 용도별로 서브 레이어아웃을 만들어서 반드시 각각 page 컴포넌트에 적용해주어야합니다. 참조 jeonghwan-kim…","id":"b29a24b3-667a-506c-91f5-67c5c11864a8"}},{"node":{"frontmatter":{"slug":"/test/test-practice-2-recoil","date":"2022년 6월 04일","title":"React Testing Library 연습(2) - Recoil과 테스트","tags":["test","basic","summary","react","front-end"]},"excerpt":"Test 코드를 작성하는 방법은 velopert의 TDD 개발 흐름으로 투두리스트 만들기와 The Net Nija의 React Testing Library 튜토리얼을 따라하면서 작성하는 방법을 익혔다. React로 개발을 하다보면 다양한 library를 사용하게 된다. 대표적으로 상태 관리 도구를 사용하는 환경에서 React 상태를 관리하게 된다. 나는 Recoil을 사용하는 상태 관리 도구로 사용하는 환경에서 TDD를 하는 방법을 연습하였다. Recoil 테스트 코드 참조 https://codesandbox.io/s/testing-recoil-fctje?file=/src/Message.tsx Recoil은 atom으로 개발자가 관리하려는 상태 값을 생성한다. 원자 단위로 상태를 관리한다는 의미에서 atom이라고 이름을 짓지 않았나 생각해본다. 생성된 atom은 컴포넌트 안에서 useRecoilState라는 훅으로 사용할 수 있다. useState…","id":"305b5e2d-d9e4-5364-89c4-1cf0683f51c9"}},{"node":{"frontmatter":{"slug":"/test/test-practice-1","date":"2022년 5월 31일","title":"React Testing Library 연습 (1) - 테스트 익숙해지기","tags":["test","basic","summary","react","front-end"]},"excerpt":"테스트 코드가 필요하다고 생각하게 된 계기는 어플리케이션의 상태를 내가 눈으로 직접 확인하며고 일일이 클릭해가면서 동작을 예측하는데 한계가 왔다고 느꼈기 때문이다. 이전부터 테스트가 있다는 것은 알았고 유튜브에서 떠도는 동영상을 봤지만 실상 내가 하는 프로젝트에서 테스트 코드를 작성하면서 개발을 진행하지 않았다. 세팅도 어렵게 느껴졌고 무엇보다 ‘무엇을 테스트 해야할까?’를 잘 몰랐다. 하지만 테스트가 정말 필요해진 시점에서 더이상 미룰 수가 없었다. 그래서 자료를 이것 저것 찾아보면서 테스트의 기초적인 것을 보게 되었고 먼저 테스트 코드를 작성하는 것에 익숙해지기로 했다. 읽기 전에 이 글은 튜토리얼이 아니며 다른 튜토리얼을 보고 배운 것을 정리한 글입니다. 튜토리얼은 테스트에 익숙해지기 좋은 자료를 참고하는 것을 권장합니다. 저의 개인적인 생각이 포함되어있습니다.(학술적이지 않음.) 테스트에 익숙해지기에 좋은 자료 The Net Ninja - React Testing…","id":"8151a3f9-2a91-58ab-8265-851aaccf30a3"}},{"node":{"frontmatter":{"slug":"/front-end-and-web-sequrity","date":"2021년 11월 21일","title":"프론트 앤드 개발자가 알아야할 웹 보안은 무엇이 있을까?","tags":["front-end","security"]},"excerpt":"돈을 받고 일을 하고 있던 그렇지 않던지 간에 어쨌든 개발을 시작하게 되면 누구나 웹 어플리케이션을 만들게 되고 한 명 이상의 사용자가 생긴다. 어플리케이션을 베포하게되면 웹 보안에 대해서 자연스럽게 관심이 가게된다. 나는 위지윅 텍스트 에디터를 커스텀으로 만들어 적용시키려다가 XSS를 알게 되고 토스트 UI 에디터를 뜯어보면서 원대한 꿈을 잠시 접어두게 되었다. XSS…","id":"d3feb77b-76cb-5184-8f02-691abdcf2551"}}]},{"fieldValue":"gatsby","totalCount":1,"edges":[{"node":{"frontmatter":{"slug":"/나의_블로그와_FOUC","date":"2022년 8월 22일","title":"나의 블로그에서 FOUC 없애기","tags":["FOUC","gatsby","front-end"]},"excerpt":"결론부터 말합니다. TLDL; 아래 글은 저의 일기와 같은 형식으로 되어있습니다. 해결 과정이 궁금하면 읽으세요. 제가 찾은 해결 방법만 적용하고 싶다면 이 파트만 읽으세요. 참조 Removing FOUC in a Gatsby Project install package FOUC는 스타일 컴포넌트 문제일 수도 있고 @import를 사용하여 불러온 웹 폰트 때문일 수도 있습니다. styled-components 때문이라면\n, , , @import된 font 때문이라면\n, ,  둘 다라면 둘 다 설치 setup gatsby-config.js typography 경로를 src/utils/typography로 설정했습니다. setup layout with Globalstyle Globalstyle @import를 삭제하세요. layout 레이어 아웃에 적용 후 용도별로 서브 레이어아웃을 만들어서 반드시 각각 page 컴포넌트에 적용해주어야합니다. 참조 jeonghwan-kim…","id":"b29a24b3-667a-506c-91f5-67c5c11864a8"}}]},{"fieldValue":"git","totalCount":1,"edges":[{"node":{"frontmatter":{"slug":"/i-m-losing-my-git","date":"2021년 11월 09일","title":"잔디 잃고 git 사용법 익힌다","tags":["git"]},"excerpt":"WTF... 잔디가 전부 뽑혀 날아가버렸다. 최근 pull을 하지 않고 작업물을 변경하면서 conflict로 인해서 스트레스를 엄청나게 받고 있었다. 그래서 나는 pull을 강제로 해서 문제들을 해결해왔다. 하지만 알수 없는 이유로 pull을 강제로 해도 되지 않았고, 양쪽 작업물 사이에서 왔다 갔다 하는 와중에 결국 나는 clone을 해서 작업물 기록을 새로 업데이트 하지 않고 어떻게 한건지 모르겠는 신박한 방법으로 push를 했다.(아마도 --force를 한듯하다.) 정말 어떻게 했는지 기억이 나지 않는다. .git 파일을 삭제하고 초기화한건지 뭔지는 모르겠지만... 잔디가 갑자기 전부 뽑힌것을 보고 당황했다. 이전에 저장해놨던 작업물이라도 있지 않을까 해서 노트북과 데스크탑을 모두 뒤졌지만 찾을 수 없었고, 결국 log…","id":"0b6e56f4-db39-5b43-baef-7fce0a7ffc4f"}}]},{"fieldValue":"hooks","totalCount":2,"edges":[{"node":{"frontmatter":{"slug":"/react/many-form","date":"2022년 4월 21일","title":"react-hook-form으로 여러개의 폼 데이터 전송하기","tags":["javascript","react","hooks","team project"]},"excerpt":"프로젝트를 진행하면서 여러개의 form 데이터를 서버로 전송해야하는 로직이 필요했다. react-hook-form을 사용하면 매우 간편하게 form 데이터를 모을 수 있다. 공식 문서에서 다양한 예제를 제공하고 있기 때문에 서식을 개발 할 때 쉽게 개발이 가능하다. 여러 데이터 한번에 수정하기 지금까지 사용해봤던 CMS 툴은 수정을 할 때, 데이터를 개별적으로만 수정이 가능했기 때문에 매우 불편했다. 물론 제공하고 있는 옵션이 많기 때문이고, 여러 가지를 한번에 수정할 필요가 없기 때문일 수도 있다. 하지만 지금 만들고 있는 프로젝트에서 상품 등록을 위한 서식은 매우 간소했다. 간소한 작업이 여러번 반복되면 사용자 입장에서 짜증이 날 것 같았다. selectItem을 받아서 화면에 수정해야할 product를 개별적으로 그려줄 수 있다. FormField를 재사용이 가능하도록 설계하기 위해서 몇 가지를 컴포넌트로 만들어주어야한다. 먼저 input 등 form…","id":"fc25a843-0262-515d-b4b5-cd23523abd61"}},{"node":{"frontmatter":{"slug":"/react/hooks","date":"2022년 3월 24일","title":"여러가지 React 프로젝트를 클론 코딩하면서 배운 것","tags":["javascript","react","hooks"]},"excerpt":"TLDR 단순 정리 클론 코딩을 하면서 React를 공부했다. 공부하면서 주입되는 건 많은데 정리를 게을리했다. 애초에 '나중에 한방에 정리해야지'라고 생각하고 넘어갔기 때문이다. 개발자의 세계에서 나중은 결코 오지 않는다. 그래서 시간이 좀 걸리더라도 지금까지 리액트 프로젝트를 하면서 배운 것을 정리한다. ENV SETTING 환경 설정은 나에게 맞는 것을 선택해서 하면 된다. 많은 사람들이 create-react-app으로 리액트를 사용한다. 처음부터 리액트를 세팅하는 방법도 있다. 아티클을 참고하는 편이 좋다. Creating your React project from scratch without create-react-app: The Complete Guide. create-react-app create-react-app with Typescript react with vite HOOKS React Hook은 React v16.8부터 React 요소로 추가되었다. React…","id":"c45dec81-17a4-5562-9f85-f99041cc2a55"}}]},{"fieldValue":"how to","totalCount":1,"edges":[{"node":{"frontmatter":{"slug":"/learn-about-toast-ui-editor","date":"2021년 11월 08일","title":"TOAST UI EDITOR를 붙이면서 배운것들","tags":["toast ui editor","how to","etc"]},"excerpt":"에디터를 붙이면서 도움이 됐던 글들 토스트 에디터 관련 tui.editor/app/editor 깃허브 저장소 에디터 문서\nTOAST UI Monthly 2021년 10월호 토스트 뷰어 관련 tui.editor/app/editor 깃허브 저장소 에디터 뷰어 문서\n에디터 뷰어 API XSS 취약점과 토스트 에디터를 선택한 이유 오픈 소스로 제공하는 텍스트 에디터가 많다. 처음에는 커스텀으로 처음부터 만들어보려고 했는데 XSS 취약점에 관련된 이슈가 리치 텍스트 에디터(위지윅)에 심각하다는 것을 알게 되었다. 그래서 해당 이슈를 최소한으로 할 수 있는 에디터를 찾다가 토스트 UI 에디터를 선택하게 되었다. 업데이트 내용\nTOAST UI Monthly 2021년 10월호 월간 토스트 UI 2021년 10월호를 보면 XSS 취약점을 개선하기 위해서DOMPurify를 적용했다고 한다. DOMPuryfiy DOMPuryfiy는 XSS…","id":"8db559d5-8135-5389-aa54-5a9ef0d0e236"}}]},{"fieldValue":"http","totalCount":2,"edges":[{"node":{"frontmatter":{"slug":"/http/rest-api","date":"2022년 1월 26일","title":"REST API","tags":["web","http","rest api"]},"excerpt":"REST? 정의와 개념 REST는 REpresentational State Transfer의 약자로 용어에서 나온 것처럼 표현의 상태를 전달을 뜻한다. 어떤 자원에 대해서 CRUD 연산을 수행하기 위해서 URI로 GET, POST, PUT, PETCH, DELETE 등의 method를 요청을 보낸다. 요청은 json이나 xml등의 형태로 요청 자원을 보낼 수 있다. REST의 구성 요소 Resource(URI), Method(행위), 표현(Representation of Resource)가 있다. 자원(resource) 모든 자원에는 고유한 id가 존재한다. 이 자원은 server에 존재한다. 자원을 구별하는 id는 http url이다. 클라이언트는 URI를 이용해 자원을 지정하고, 자원의 상태에 대한 조작을 server에 요청한다. 행위(method) http 프로토콜의 method를 사용한다. get : read. 정보 요청 post : create…","id":"d4b67f74-9967-5980-a918-8f01713fe0af"}},{"node":{"frontmatter":{"slug":"/http/about-http","date":"2021년 11월 21일","title":"HTTP(Hypertext Transfer Protocol)","tags":["web","http"]},"excerpt":"클라이언트와 서버간의 소통 방법은 무엇이 있을까? 글 전체 참조 MDN - HTTP HTTP 완벽 가이드 [10분 테코톡] 🧃쿨라임의 HTTP/1.1, HTTP/2, 그리고 QUIC 개요 클라이언트와 서버 HTTP는 HTML 문서와 같은 리소스들을 가져올 수 있도록 해주는 프로토콜이다. HTTP는 웹에서 이루어지는 모든 데이터 교환의 기초이며, 클라이언트-서버 프로토콜이기도 하다. HTTP 클라이언트의 요청과 HTTP 서버의 응답은 www의 기본 요소다.클라이언트-서버 프로토콜은 수신자 측에 의해 요청이 초기화되는 프로토콜을 의미한다. 하나의 완전한 문서는 텍스트, 레이아웃, 설명, 이미지, 비디오, 스크립트 등 불러온 하위 문서들로 제구성된다. 리소스 웹 서버는 리소스를 관리하고 제공한다. 그림, 워드파일, HTML, Javscript 등 어떤 종류의 콘텐츠도 리소스가 될 수 있다. 미디어 타입 인터넷은 수천가지 데이터 타입을 다루기 때문에 HTTP…","id":"6b1084d3-6d45-5592-8301-0459f1bb720e"}}]},{"fieldValue":"javascript","totalCount":9,"edges":[{"node":{"frontmatter":{"slug":"/react/many-form","date":"2022년 4월 21일","title":"react-hook-form으로 여러개의 폼 데이터 전송하기","tags":["javascript","react","hooks","team project"]},"excerpt":"프로젝트를 진행하면서 여러개의 form 데이터를 서버로 전송해야하는 로직이 필요했다. react-hook-form을 사용하면 매우 간편하게 form 데이터를 모을 수 있다. 공식 문서에서 다양한 예제를 제공하고 있기 때문에 서식을 개발 할 때 쉽게 개발이 가능하다. 여러 데이터 한번에 수정하기 지금까지 사용해봤던 CMS 툴은 수정을 할 때, 데이터를 개별적으로만 수정이 가능했기 때문에 매우 불편했다. 물론 제공하고 있는 옵션이 많기 때문이고, 여러 가지를 한번에 수정할 필요가 없기 때문일 수도 있다. 하지만 지금 만들고 있는 프로젝트에서 상품 등록을 위한 서식은 매우 간소했다. 간소한 작업이 여러번 반복되면 사용자 입장에서 짜증이 날 것 같았다. selectItem을 받아서 화면에 수정해야할 product를 개별적으로 그려줄 수 있다. FormField를 재사용이 가능하도록 설계하기 위해서 몇 가지를 컴포넌트로 만들어주어야한다. 먼저 input 등 form…","id":"fc25a843-0262-515d-b4b5-cd23523abd61"}},{"node":{"frontmatter":{"slug":"/react/custom-hook-useFetch","date":"2022년 3월 31일","title":"useFetch 만들기","tags":["javascript","react","custom hook","useFetch"]},"excerpt":"useFetch는 만들어 놓으면 사용할 때가 많아서 편리하다. React에서 서버와 비동기로 데이터를 주고 받는 경우가 많기 때문이다. useFetch가 없다면 비동기로 데이터를 주고 받을 때마다 복잡한 코드를 계속 작성해야한다. 불필요한 반복을 제거하기 위해서 useFetch를 만들었다. 처음에는 GET만 됐다. 하지만 POST, DELETE같은 다른 method에서도 사용이 가능해야했다. useFetch를 범용으로 만든 과정을 기록한다. 아울러 Typescript를 함께 사용하면서 오류를 해결한 과정도 함께 기록한다. GET부터 천천히 useFetch가 GET에서만 동작한다면 그다지 복잡하지 않다. 구글링만 잘 해도 수많은 예제가 나온다. 사실 useState, useEffect만 잘 활용해도 쉽게 만들 수 있다. 만들면서 Typescript에서 빨간색 밑줄이 쳐질때 interface로 type…","id":"e3631357-c549-5bf2-8340-5fded6bd1963"}},{"node":{"frontmatter":{"slug":"/react/hooks","date":"2022년 3월 24일","title":"여러가지 React 프로젝트를 클론 코딩하면서 배운 것","tags":["javascript","react","hooks"]},"excerpt":"TLDR 단순 정리 클론 코딩을 하면서 React를 공부했다. 공부하면서 주입되는 건 많은데 정리를 게을리했다. 애초에 '나중에 한방에 정리해야지'라고 생각하고 넘어갔기 때문이다. 개발자의 세계에서 나중은 결코 오지 않는다. 그래서 시간이 좀 걸리더라도 지금까지 리액트 프로젝트를 하면서 배운 것을 정리한다. ENV SETTING 환경 설정은 나에게 맞는 것을 선택해서 하면 된다. 많은 사람들이 create-react-app으로 리액트를 사용한다. 처음부터 리액트를 세팅하는 방법도 있다. 아티클을 참고하는 편이 좋다. Creating your React project from scratch without create-react-app: The Complete Guide. create-react-app create-react-app with Typescript react with vite HOOKS React Hook은 React v16.8부터 React 요소로 추가되었다. React…","id":"c45dec81-17a4-5562-9f85-f99041cc2a55"}},{"node":{"frontmatter":{"slug":"/react/invalid-hook-call","date":"2022년 3월 22일","title":"Styled Components와 Invalid Hook Call","tags":["javascript","react","error"]},"excerpt":"invalid-hook-call-error 요즘 React로 이것저것 만들어보기 시작했다. 그러다 만나게 된 Error가 생겼다. 그런데 Error가 일관적으로 발생하는 것이라면 납득이 될텐데 조금 이상한 경우라서 기록을 하기로 했다. 먼저 Error 발생의 원인을 찾은 순서와 해결한 방법을 이야기하려고 한다. 그 다음에 Invalid Hook Call이 무엇인지 그리고 React 공식 문서에서는 어떤 해결책을 제시하고 있는지 마지막에 기록했다. 컴퓨터에 따라 Error가 나왔다 안나왔다. 나는 두 대의 컴퓨터를 사용한다. Apple Macbook Air M1 Apple iMac Intel 문제 M1에서 계속 Invalid 에러가 발생했다. 처음 Create React App으로 개발 환경을 세팅했을 때는 오류가 발생하지 않았기 때문에 패키지에서 발생하는 오류라고 추론했다. 패키지를 하나씩 지우면서 Styled-Components, createGlobalStyle…","id":"168dcd25-79d8-586a-bc75-7c8435beb451"}},{"node":{"frontmatter":{"slug":"/javascript/javascript-module","date":"2022년 2월 09일","title":"Javascript Module","tags":["javascript","module"]},"excerpt":"module이란? 모듈은 캡슐화된 코드다. 단순히 캡슐화만 하여 글로벌 스페이스를 오염시키지 않는 역할로 끝나지 않고 코드를 재사용 할 수 있도록 돕는 훌륭한 도구다. 모듈이 없었을 때는 javascript design pattern이 있었다. 디자인 패턴이 유효하지 않다는 것은 아니지만 현대 자바스크립트는 모듈로 인해 디자인 패턴이 제공하는 캡슐화 보다 훨씬 더 편하게 자바스크립트 코드를 작성하고 관리하고 재사용할 수 있게 되었다. ES5에서 모듈 패턴은 대표적으로 IIFE와 Revealing Module이 있다. 캡슐화를 할 수 있다는 장점이 있지만 종속성을 제공하지 않았다. 이 한계를 극복하기 위해서 module formats이 생겨났다. IIFE IIFE는 즉시 실행 함수다. IIFE는 함수 표현식일때 사용할 수 있다. function 키워드가 맨 앞에 올 경우 자바스크립트는 함수 선언이라고 생각하기 때문에 함수 표현식이라는 것을 알려주기 위해서 앞에 +, !, ~, void…","id":"3db7f8c9-d2c4-52ba-845c-64228612eee8"}},{"node":{"frontmatter":{"slug":"/scroll-animation-velog","date":"2022년 1월 26일","title":"스크롤 애니메이션으로 velog 메뉴 흉내내기","tags":["javascript","animation"]},"excerpt":"스크롤 애니메이션은 말 그대로 인터넷 브라우저의 스크롤을 사용하여 타이밍을 설계해서 유저에게 컨텐츠를 보여주는 애니메이션이다. 스크롤 애니메이션은 사용자에게 시각적으로 보다 더 다양한 경험을 제공할 수 있다. 화면이 로딩 됨과 동시에 컨텐츠가 보여지는 것이 아니고 동영상 플레이어를 재생할 때, 타임 라인을 탐색 하는 듯한 경험을 제공할 수 있다. 나는 애플 클론 수업을 수강하면서 배운 스크롤 애니메이션을 메뉴바에 적용하기로 했다. UX…","id":"cab6aa38-db40-52ab-a28d-b194de710397"}},{"node":{"frontmatter":{"slug":"/ajax-with-javascript","date":"2021년 11월 19일","title":"자바스크립트로 비동기를 처리하는 방법","tags":["ajax","javascript"]},"excerpt":"자바스크립트 공부하다 비동기를 처리하는 방법에 XMLHttpRequest라는 것을 만나게 됐다. 나는 async/awiat을 써왔기 때문에 이게 뭔가 싶었다. 갑자기 fetch는 무엇이고 Promise는 무엇인지 햇갈렸다. fetch가 있는데 갑자기 XMLHttpRequest는 뭐지? fetch는 Promise 기반이라고 하는데 그럼 fetch와 Promise의 역할이 뭐지? 서로 같은건가? async/awiat와 fetch를 함께 쓰는데 async/await는 Promise…","id":"eb1ca7fa-0903-51cc-9ee9-75a1dd90417d"}},{"node":{"frontmatter":{"slug":"/form-validation","date":"2021년 11월 12일","title":"Form Validation","tags":["ajax","javascript","validation","form"]},"excerpt":"폼을 검증하는 것은 사용자 경험에 좋은 영향을 준다. 회원가입이나 로그인을 할 때, 서식 쓰기를 거부하거나 회원 인증을 거부하면 왜 그런지 이유를 알려주어야한다. 그러지 않을 경우 사용자는 미궁속에 빠지게 될 것이다. 이전에 서식 검증 코드를 만들었지만 코드가 작동만 할 뿐이었다. 그래서 서식 검증 코드를 조금 손봐서 다시 작성하기로 했다. 기존의 서식 검증 코드는 프론트에서 글자수나 필수적으로 들어가야하는 문자에 대해서만 검증을 했다. 회원 가입 버튼을 눌렀을 때, 백앤드에서 아이디 중복이나 비밀번호 검증을 했다. 하지만 이 절차가 매우 불편했다. 왜냐하면 사용자가 이메일을 입력했을 때, 사용할 수 있다고 알려주었는데 회원 가입 버튼을 누르자 다시 이메일이 중복된다는 메시지를 프론트에 출력했기 때문에 사용자가 두 번 일을 해야했기 때문이다. 게다가 switch…","id":"a82b33d6-b2ba-58eb-bbcf-87f0c1806a8c"}},{"node":{"frontmatter":{"slug":"/validation-in-front-end","date":"2021년 9월 02일","title":"Front에서 양식 검증하기","tags":["ajax","javascript","validation"]},"excerpt":"다시 컴퓨터에 앉았다. 저번 구상대로 모든 것을 싹 바꾸기로 했다. 일단 프론트에서 회원가입 양식을 받아서 값을 먼저 검증하기로 했다. 그래서 기존에 회원 가입 양식을 확인하는 절차를 만들었다. 저번에 구상했던 것을 전부 뒤집어 엎었지만 지금이 코드 가독성이나 작동 측면이나 모든 면에서 훨씬 좋은 것 같다. 괜히 sessionStorage를 사용하지 않아도 된다. 일단 document에서 input값을 불러오는 것을 내가 반복하기가 너무 싫었다.(나는 게으르니까...) 그래서 querySelectAll을 사용해서 input을 전부 불러오기로 했다. 그럼 유사 배열로 input을 전부 불러올 수 있다. 만든 객체를 checkJoinData에 넘겨주고나면 객체 값을 검증하는 함수를 짰다. 최대한 반복을 피하고 싶었다. 그런데 왜 함수가 결국 거기서 거기인 것 같을까. 어쨌든 객체에 저장된 키 값을 각각 email, name, username, password…","id":"bca4fe98-1f3e-5f6f-b8c5-d145ab730647"}}]},{"fieldValue":"module","totalCount":2,"edges":[{"node":{"frontmatter":{"slug":"/javascript/webpack-5","date":"2022년 2월 10일","title":"WebPack5","tags":["webpack","module"]},"excerpt":"깃헙 주소 웹팩이란? 웹팩의 컨셉은 module을 한데 모아 하나 이상의 파일로 build 한다. 웹팩은 정적이다. ES6 모듈이 있는데 bunlder를 사용하는 것은 조금 블랙 코미디 같지만 세상 이치가 꼭 표준대로 돌아가지 않으니까. 대신 새로운 기술이 나오는 대로 여러 브라우저에서 효과적으로 적용될 수 있도록 도구가 있다는 사실이 감사할 뿐이다. 웹펙은 모듈 번들러이기 때문에 module로 작성된 자바스크립트 코드를 롤업하는 역할을 주로 한다. 여러개로 나뉜 현대 자바스크립트를 클래식 자바스크립트로 변환해서 사용할 수 있다. 모듈을 공부하면서 이렇게 하는 이유에 대해서 몇가지 읽어봤는데, 현재 모든 브라우저가 ES6 module을 지원하고 있지 않고, 성능 이슈가 있기 때문이다. 모듈을 공부하기 이전에 웹팩을 그냥 설치해서 썼다. 하지만 계속 오류를 만나기도 하고, 막상 혼자서 webpack…","id":"0b4d2f2c-f8fc-5714-a191-0542b69e265b"}},{"node":{"frontmatter":{"slug":"/javascript/javascript-module","date":"2022년 2월 09일","title":"Javascript Module","tags":["javascript","module"]},"excerpt":"module이란? 모듈은 캡슐화된 코드다. 단순히 캡슐화만 하여 글로벌 스페이스를 오염시키지 않는 역할로 끝나지 않고 코드를 재사용 할 수 있도록 돕는 훌륭한 도구다. 모듈이 없었을 때는 javascript design pattern이 있었다. 디자인 패턴이 유효하지 않다는 것은 아니지만 현대 자바스크립트는 모듈로 인해 디자인 패턴이 제공하는 캡슐화 보다 훨씬 더 편하게 자바스크립트 코드를 작성하고 관리하고 재사용할 수 있게 되었다. ES5에서 모듈 패턴은 대표적으로 IIFE와 Revealing Module이 있다. 캡슐화를 할 수 있다는 장점이 있지만 종속성을 제공하지 않았다. 이 한계를 극복하기 위해서 module formats이 생겨났다. IIFE IIFE는 즉시 실행 함수다. IIFE는 함수 표현식일때 사용할 수 있다. function 키워드가 맨 앞에 올 경우 자바스크립트는 함수 선언이라고 생각하기 때문에 함수 표현식이라는 것을 알려주기 위해서 앞에 +, !, ~, void…","id":"3db7f8c9-d2c4-52ba-845c-64228612eee8"}}]},{"fieldValue":"react","totalCount":6,"edges":[{"node":{"frontmatter":{"slug":"/test/test-practice-2-recoil","date":"2022년 6월 04일","title":"React Testing Library 연습(2) - Recoil과 테스트","tags":["test","basic","summary","react","front-end"]},"excerpt":"Test 코드를 작성하는 방법은 velopert의 TDD 개발 흐름으로 투두리스트 만들기와 The Net Nija의 React Testing Library 튜토리얼을 따라하면서 작성하는 방법을 익혔다. React로 개발을 하다보면 다양한 library를 사용하게 된다. 대표적으로 상태 관리 도구를 사용하는 환경에서 React 상태를 관리하게 된다. 나는 Recoil을 사용하는 상태 관리 도구로 사용하는 환경에서 TDD를 하는 방법을 연습하였다. Recoil 테스트 코드 참조 https://codesandbox.io/s/testing-recoil-fctje?file=/src/Message.tsx Recoil은 atom으로 개발자가 관리하려는 상태 값을 생성한다. 원자 단위로 상태를 관리한다는 의미에서 atom이라고 이름을 짓지 않았나 생각해본다. 생성된 atom은 컴포넌트 안에서 useRecoilState라는 훅으로 사용할 수 있다. useState…","id":"305b5e2d-d9e4-5364-89c4-1cf0683f51c9"}},{"node":{"frontmatter":{"slug":"/test/test-practice-1","date":"2022년 5월 31일","title":"React Testing Library 연습 (1) - 테스트 익숙해지기","tags":["test","basic","summary","react","front-end"]},"excerpt":"테스트 코드가 필요하다고 생각하게 된 계기는 어플리케이션의 상태를 내가 눈으로 직접 확인하며고 일일이 클릭해가면서 동작을 예측하는데 한계가 왔다고 느꼈기 때문이다. 이전부터 테스트가 있다는 것은 알았고 유튜브에서 떠도는 동영상을 봤지만 실상 내가 하는 프로젝트에서 테스트 코드를 작성하면서 개발을 진행하지 않았다. 세팅도 어렵게 느껴졌고 무엇보다 ‘무엇을 테스트 해야할까?’를 잘 몰랐다. 하지만 테스트가 정말 필요해진 시점에서 더이상 미룰 수가 없었다. 그래서 자료를 이것 저것 찾아보면서 테스트의 기초적인 것을 보게 되었고 먼저 테스트 코드를 작성하는 것에 익숙해지기로 했다. 읽기 전에 이 글은 튜토리얼이 아니며 다른 튜토리얼을 보고 배운 것을 정리한 글입니다. 튜토리얼은 테스트에 익숙해지기 좋은 자료를 참고하는 것을 권장합니다. 저의 개인적인 생각이 포함되어있습니다.(학술적이지 않음.) 테스트에 익숙해지기에 좋은 자료 The Net Ninja - React Testing…","id":"8151a3f9-2a91-58ab-8265-851aaccf30a3"}},{"node":{"frontmatter":{"slug":"/react/many-form","date":"2022년 4월 21일","title":"react-hook-form으로 여러개의 폼 데이터 전송하기","tags":["javascript","react","hooks","team project"]},"excerpt":"프로젝트를 진행하면서 여러개의 form 데이터를 서버로 전송해야하는 로직이 필요했다. react-hook-form을 사용하면 매우 간편하게 form 데이터를 모을 수 있다. 공식 문서에서 다양한 예제를 제공하고 있기 때문에 서식을 개발 할 때 쉽게 개발이 가능하다. 여러 데이터 한번에 수정하기 지금까지 사용해봤던 CMS 툴은 수정을 할 때, 데이터를 개별적으로만 수정이 가능했기 때문에 매우 불편했다. 물론 제공하고 있는 옵션이 많기 때문이고, 여러 가지를 한번에 수정할 필요가 없기 때문일 수도 있다. 하지만 지금 만들고 있는 프로젝트에서 상품 등록을 위한 서식은 매우 간소했다. 간소한 작업이 여러번 반복되면 사용자 입장에서 짜증이 날 것 같았다. selectItem을 받아서 화면에 수정해야할 product를 개별적으로 그려줄 수 있다. FormField를 재사용이 가능하도록 설계하기 위해서 몇 가지를 컴포넌트로 만들어주어야한다. 먼저 input 등 form…","id":"fc25a843-0262-515d-b4b5-cd23523abd61"}},{"node":{"frontmatter":{"slug":"/react/custom-hook-useFetch","date":"2022년 3월 31일","title":"useFetch 만들기","tags":["javascript","react","custom hook","useFetch"]},"excerpt":"useFetch는 만들어 놓으면 사용할 때가 많아서 편리하다. React에서 서버와 비동기로 데이터를 주고 받는 경우가 많기 때문이다. useFetch가 없다면 비동기로 데이터를 주고 받을 때마다 복잡한 코드를 계속 작성해야한다. 불필요한 반복을 제거하기 위해서 useFetch를 만들었다. 처음에는 GET만 됐다. 하지만 POST, DELETE같은 다른 method에서도 사용이 가능해야했다. useFetch를 범용으로 만든 과정을 기록한다. 아울러 Typescript를 함께 사용하면서 오류를 해결한 과정도 함께 기록한다. GET부터 천천히 useFetch가 GET에서만 동작한다면 그다지 복잡하지 않다. 구글링만 잘 해도 수많은 예제가 나온다. 사실 useState, useEffect만 잘 활용해도 쉽게 만들 수 있다. 만들면서 Typescript에서 빨간색 밑줄이 쳐질때 interface로 type…","id":"e3631357-c549-5bf2-8340-5fded6bd1963"}},{"node":{"frontmatter":{"slug":"/react/hooks","date":"2022년 3월 24일","title":"여러가지 React 프로젝트를 클론 코딩하면서 배운 것","tags":["javascript","react","hooks"]},"excerpt":"TLDR 단순 정리 클론 코딩을 하면서 React를 공부했다. 공부하면서 주입되는 건 많은데 정리를 게을리했다. 애초에 '나중에 한방에 정리해야지'라고 생각하고 넘어갔기 때문이다. 개발자의 세계에서 나중은 결코 오지 않는다. 그래서 시간이 좀 걸리더라도 지금까지 리액트 프로젝트를 하면서 배운 것을 정리한다. ENV SETTING 환경 설정은 나에게 맞는 것을 선택해서 하면 된다. 많은 사람들이 create-react-app으로 리액트를 사용한다. 처음부터 리액트를 세팅하는 방법도 있다. 아티클을 참고하는 편이 좋다. Creating your React project from scratch without create-react-app: The Complete Guide. create-react-app create-react-app with Typescript react with vite HOOKS React Hook은 React v16.8부터 React 요소로 추가되었다. React…","id":"c45dec81-17a4-5562-9f85-f99041cc2a55"}},{"node":{"frontmatter":{"slug":"/react/invalid-hook-call","date":"2022년 3월 22일","title":"Styled Components와 Invalid Hook Call","tags":["javascript","react","error"]},"excerpt":"invalid-hook-call-error 요즘 React로 이것저것 만들어보기 시작했다. 그러다 만나게 된 Error가 생겼다. 그런데 Error가 일관적으로 발생하는 것이라면 납득이 될텐데 조금 이상한 경우라서 기록을 하기로 했다. 먼저 Error 발생의 원인을 찾은 순서와 해결한 방법을 이야기하려고 한다. 그 다음에 Invalid Hook Call이 무엇인지 그리고 React 공식 문서에서는 어떤 해결책을 제시하고 있는지 마지막에 기록했다. 컴퓨터에 따라 Error가 나왔다 안나왔다. 나는 두 대의 컴퓨터를 사용한다. Apple Macbook Air M1 Apple iMac Intel 문제 M1에서 계속 Invalid 에러가 발생했다. 처음 Create React App으로 개발 환경을 세팅했을 때는 오류가 발생하지 않았기 때문에 패키지에서 발생하는 오류라고 추론했다. 패키지를 하나씩 지우면서 Styled-Components, createGlobalStyle…","id":"168dcd25-79d8-586a-bc75-7c8435beb451"}}]},{"fieldValue":"rest api","totalCount":1,"edges":[{"node":{"frontmatter":{"slug":"/http/rest-api","date":"2022년 1월 26일","title":"REST API","tags":["web","http","rest api"]},"excerpt":"REST? 정의와 개념 REST는 REpresentational State Transfer의 약자로 용어에서 나온 것처럼 표현의 상태를 전달을 뜻한다. 어떤 자원에 대해서 CRUD 연산을 수행하기 위해서 URI로 GET, POST, PUT, PETCH, DELETE 등의 method를 요청을 보낸다. 요청은 json이나 xml등의 형태로 요청 자원을 보낼 수 있다. REST의 구성 요소 Resource(URI), Method(행위), 표현(Representation of Resource)가 있다. 자원(resource) 모든 자원에는 고유한 id가 존재한다. 이 자원은 server에 존재한다. 자원을 구별하는 id는 http url이다. 클라이언트는 URI를 이용해 자원을 지정하고, 자원의 상태에 대한 조작을 server에 요청한다. 행위(method) http 프로토콜의 method를 사용한다. get : read. 정보 요청 post : create…","id":"d4b67f74-9967-5980-a918-8f01713fe0af"}}]},{"fieldValue":"security","totalCount":1,"edges":[{"node":{"frontmatter":{"slug":"/front-end-and-web-sequrity","date":"2021년 11월 21일","title":"프론트 앤드 개발자가 알아야할 웹 보안은 무엇이 있을까?","tags":["front-end","security"]},"excerpt":"돈을 받고 일을 하고 있던 그렇지 않던지 간에 어쨌든 개발을 시작하게 되면 누구나 웹 어플리케이션을 만들게 되고 한 명 이상의 사용자가 생긴다. 어플리케이션을 베포하게되면 웹 보안에 대해서 자연스럽게 관심이 가게된다. 나는 위지윅 텍스트 에디터를 커스텀으로 만들어 적용시키려다가 XSS를 알게 되고 토스트 UI 에디터를 뜯어보면서 원대한 꿈을 잠시 접어두게 되었다. XSS…","id":"d3feb77b-76cb-5184-8f02-691abdcf2551"}}]},{"fieldValue":"session","totalCount":1,"edges":[{"node":{"frontmatter":{"slug":"/http/cooki-and-session","date":"2022년 1월 02일","title":"쿠키와 세션","tags":["web","cookie","session"]},"excerpt":"기본적인 웹 보안을 공부하다가 갑자기 쿠키로 다시 오게 되었다. 내가 알고 있는 지식이 하나의 파편 조각처럼 흩어져 있을 뿐 연결이 제대로 되지 않는 기분이다. 어쨌든 쿠키와 세션이 무엇인지 역할은 무엇인지 기능적으로 어떻게 작동하는지 등을 이참에 정리하기로 마음먹었다. 쿠키 학습 방향 쿠키가 뭘까? 쿠키는 왜 생겼을까? 쿠키가 없다면? 쿠키는 어떻게 동작할까? NodeJS 환경에서 ExpressJS를 활용해 쿠키를 만드는 방법 다루지 않는 것\n쿠키의 종류\n쿠키와 관련된 보안 이슈\n참조에 한국 인터넷 진흥원의 인터넷사이트 쿠키(Cookie)의 주요 이슈 및 취약점 분석을 읽어보기를 바란다. 쿠키란? 쿠키는 HTTP…","id":"65055b9c-f23d-51f4-9d22-dfe6096db0d9"}}]},{"fieldValue":"summary","totalCount":3,"edges":[{"node":{"frontmatter":{"slug":"/test/test-practice-2-recoil","date":"2022년 6월 04일","title":"React Testing Library 연습(2) - Recoil과 테스트","tags":["test","basic","summary","react","front-end"]},"excerpt":"Test 코드를 작성하는 방법은 velopert의 TDD 개발 흐름으로 투두리스트 만들기와 The Net Nija의 React Testing Library 튜토리얼을 따라하면서 작성하는 방법을 익혔다. React로 개발을 하다보면 다양한 library를 사용하게 된다. 대표적으로 상태 관리 도구를 사용하는 환경에서 React 상태를 관리하게 된다. 나는 Recoil을 사용하는 상태 관리 도구로 사용하는 환경에서 TDD를 하는 방법을 연습하였다. Recoil 테스트 코드 참조 https://codesandbox.io/s/testing-recoil-fctje?file=/src/Message.tsx Recoil은 atom으로 개발자가 관리하려는 상태 값을 생성한다. 원자 단위로 상태를 관리한다는 의미에서 atom이라고 이름을 짓지 않았나 생각해본다. 생성된 atom은 컴포넌트 안에서 useRecoilState라는 훅으로 사용할 수 있다. useState…","id":"305b5e2d-d9e4-5364-89c4-1cf0683f51c9"}},{"node":{"frontmatter":{"slug":"/test/test-practice-1","date":"2022년 5월 31일","title":"React Testing Library 연습 (1) - 테스트 익숙해지기","tags":["test","basic","summary","react","front-end"]},"excerpt":"테스트 코드가 필요하다고 생각하게 된 계기는 어플리케이션의 상태를 내가 눈으로 직접 확인하며고 일일이 클릭해가면서 동작을 예측하는데 한계가 왔다고 느꼈기 때문이다. 이전부터 테스트가 있다는 것은 알았고 유튜브에서 떠도는 동영상을 봤지만 실상 내가 하는 프로젝트에서 테스트 코드를 작성하면서 개발을 진행하지 않았다. 세팅도 어렵게 느껴졌고 무엇보다 ‘무엇을 테스트 해야할까?’를 잘 몰랐다. 하지만 테스트가 정말 필요해진 시점에서 더이상 미룰 수가 없었다. 그래서 자료를 이것 저것 찾아보면서 테스트의 기초적인 것을 보게 되었고 먼저 테스트 코드를 작성하는 것에 익숙해지기로 했다. 읽기 전에 이 글은 튜토리얼이 아니며 다른 튜토리얼을 보고 배운 것을 정리한 글입니다. 튜토리얼은 테스트에 익숙해지기 좋은 자료를 참고하는 것을 권장합니다. 저의 개인적인 생각이 포함되어있습니다.(학술적이지 않음.) 테스트에 익숙해지기에 좋은 자료 The Net Ninja - React Testing…","id":"8151a3f9-2a91-58ab-8265-851aaccf30a3"}},{"node":{"frontmatter":{"slug":"/typescript/basic-summary","date":"2022년 5월 20일","title":"Typescript 기본 정리","tags":["typescript","basic","summary"]},"excerpt":"참고한 글과 강의 노마드 코더 타입스크립트로 블록체인 만들기 타입스크립트 핸드북(joshua1988) 타입추론 타입스크립트 도큐멘테이션 기록의 힘 [TypeScript] 타입스크립트 함수 오버로딩 : Function Overloading 토스트 UI 타입스크립트의 Never 타입 완벽 가이드 Types vs. interfaces in TypeScript Type vs Interface…","id":"18fd1747-5fd1-5033-aa29-75444e3b95e6"}}]},{"fieldValue":"team project","totalCount":3,"edges":[{"node":{"frontmatter":{"slug":"/react/many-form","date":"2022년 4월 21일","title":"react-hook-form으로 여러개의 폼 데이터 전송하기","tags":["javascript","react","hooks","team project"]},"excerpt":"프로젝트를 진행하면서 여러개의 form 데이터를 서버로 전송해야하는 로직이 필요했다. react-hook-form을 사용하면 매우 간편하게 form 데이터를 모을 수 있다. 공식 문서에서 다양한 예제를 제공하고 있기 때문에 서식을 개발 할 때 쉽게 개발이 가능하다. 여러 데이터 한번에 수정하기 지금까지 사용해봤던 CMS 툴은 수정을 할 때, 데이터를 개별적으로만 수정이 가능했기 때문에 매우 불편했다. 물론 제공하고 있는 옵션이 많기 때문이고, 여러 가지를 한번에 수정할 필요가 없기 때문일 수도 있다. 하지만 지금 만들고 있는 프로젝트에서 상품 등록을 위한 서식은 매우 간소했다. 간소한 작업이 여러번 반복되면 사용자 입장에서 짜증이 날 것 같았다. selectItem을 받아서 화면에 수정해야할 product를 개별적으로 그려줄 수 있다. FormField를 재사용이 가능하도록 설계하기 위해서 몇 가지를 컴포넌트로 만들어주어야한다. 먼저 input 등 form…","id":"fc25a843-0262-515d-b4b5-cd23523abd61"}},{"node":{"frontmatter":{"slug":"/etc/kiosk-team-project-2","date":"2022년 4월 05일","title":"프로젝트를 하면서 겪은 문제, Typescript와 StyledComponent, Event, Component 설계하기","tags":["team project","etc"]},"excerpt":"매력적인 제목을 짓지 못해 라이트 노벨과 같은 제목처럼 길게 썼다. 3일차까지 하면서 겪은 문제를 한번 정리하고 넘어가야겠다고 생각해서 거의 회고와 같은 형식으로 적는다. 쓰면 쓸 수록 좋으면서도 싫은 TypeScript 타입 스크리트는 전달받을 객체가 무엇인지 예측 할 수 있기 때문에 생각보다 실수를 할일이 적어진다. 또 다른 한편으로 상태를 내가 생각하면서 설계를 하기 때문에 코드를 조금 더 생각하면서 작성하게 되는 것 같다. 예상치 못한 상태를 받는 경우 빨간줄이 쳐지는데 그럴 때, 메시지를 잘 읽어보면 왜 오류가 났는지 잘 설명해준다. 그런데 항상 설명을 보았다고 바로 해결할 수는 없다. 대부분의 오류는 어떤 interface나 type을 상속받고 있는데 그곳에 undefiened나 null…","id":"4cb3dd86-82ac-526d-992d-90fbbccd01c5"}},{"node":{"frontmatter":{"slug":"/etc/kiosk-team-project-1","date":"2022년 4월 03일","title":"누구나 키오스크 팀 프로젝트 시작","tags":["team project","etc"]},"excerpt":"팀 프로젝트를 시작했다. 감사하게도 프론트앤드 개발하시는 분이 한분 합류해주셨다. 아쉽게도 백앤드 팀원을 구하지 못해서 해야 할 일이 배로 늘게 되었지만 어차피 지금까지 배웠던 것을 복습한다고 생각하고 처음부터 진행하기로 했다. 백앤드 개발자는 구해지는 대로 협의를 하여서 맡기기로 했다. 프로젝트 세팅하기 프로젝트 세팅은 생각보다 시간이 많이 걸렸다. 약 10시간정도의 시간을 가지고 프로젝트를 세팅했다 처음 세팅하는 것이기 때문에 구글에서 이것 저것 찾아보면서 세팅을 했다. 설계 Figma를 사용해서 기본 틀을 그렸다. 구성은 로그인화면 관리자 화면, 고객 화면, 상품 관리 화면, 크루 화면으로 나눴다. 피자 배달을 하면서 불편했던 점을 반영하려고 했다. 피그마를 사용하면서 component 단위로 설계할 수 있어서 정말 편했다. 복잡한 디자인이 아니라면 프론트 앤드 개발자라면 쉽게 사용할 수 있었다. Git git…","id":"edb5cdbe-82dc-51d9-89e7-9f65da47d02f"}}]},{"fieldValue":"test","totalCount":2,"edges":[{"node":{"frontmatter":{"slug":"/test/test-practice-2-recoil","date":"2022년 6월 04일","title":"React Testing Library 연습(2) - Recoil과 테스트","tags":["test","basic","summary","react","front-end"]},"excerpt":"Test 코드를 작성하는 방법은 velopert의 TDD 개발 흐름으로 투두리스트 만들기와 The Net Nija의 React Testing Library 튜토리얼을 따라하면서 작성하는 방법을 익혔다. React로 개발을 하다보면 다양한 library를 사용하게 된다. 대표적으로 상태 관리 도구를 사용하는 환경에서 React 상태를 관리하게 된다. 나는 Recoil을 사용하는 상태 관리 도구로 사용하는 환경에서 TDD를 하는 방법을 연습하였다. Recoil 테스트 코드 참조 https://codesandbox.io/s/testing-recoil-fctje?file=/src/Message.tsx Recoil은 atom으로 개발자가 관리하려는 상태 값을 생성한다. 원자 단위로 상태를 관리한다는 의미에서 atom이라고 이름을 짓지 않았나 생각해본다. 생성된 atom은 컴포넌트 안에서 useRecoilState라는 훅으로 사용할 수 있다. useState…","id":"305b5e2d-d9e4-5364-89c4-1cf0683f51c9"}},{"node":{"frontmatter":{"slug":"/test/test-practice-1","date":"2022년 5월 31일","title":"React Testing Library 연습 (1) - 테스트 익숙해지기","tags":["test","basic","summary","react","front-end"]},"excerpt":"테스트 코드가 필요하다고 생각하게 된 계기는 어플리케이션의 상태를 내가 눈으로 직접 확인하며고 일일이 클릭해가면서 동작을 예측하는데 한계가 왔다고 느꼈기 때문이다. 이전부터 테스트가 있다는 것은 알았고 유튜브에서 떠도는 동영상을 봤지만 실상 내가 하는 프로젝트에서 테스트 코드를 작성하면서 개발을 진행하지 않았다. 세팅도 어렵게 느껴졌고 무엇보다 ‘무엇을 테스트 해야할까?’를 잘 몰랐다. 하지만 테스트가 정말 필요해진 시점에서 더이상 미룰 수가 없었다. 그래서 자료를 이것 저것 찾아보면서 테스트의 기초적인 것을 보게 되었고 먼저 테스트 코드를 작성하는 것에 익숙해지기로 했다. 읽기 전에 이 글은 튜토리얼이 아니며 다른 튜토리얼을 보고 배운 것을 정리한 글입니다. 튜토리얼은 테스트에 익숙해지기 좋은 자료를 참고하는 것을 권장합니다. 저의 개인적인 생각이 포함되어있습니다.(학술적이지 않음.) 테스트에 익숙해지기에 좋은 자료 The Net Ninja - React Testing…","id":"8151a3f9-2a91-58ab-8265-851aaccf30a3"}}]},{"fieldValue":"toast ui editor","totalCount":1,"edges":[{"node":{"frontmatter":{"slug":"/learn-about-toast-ui-editor","date":"2021년 11월 08일","title":"TOAST UI EDITOR를 붙이면서 배운것들","tags":["toast ui editor","how to","etc"]},"excerpt":"에디터를 붙이면서 도움이 됐던 글들 토스트 에디터 관련 tui.editor/app/editor 깃허브 저장소 에디터 문서\nTOAST UI Monthly 2021년 10월호 토스트 뷰어 관련 tui.editor/app/editor 깃허브 저장소 에디터 뷰어 문서\n에디터 뷰어 API XSS 취약점과 토스트 에디터를 선택한 이유 오픈 소스로 제공하는 텍스트 에디터가 많다. 처음에는 커스텀으로 처음부터 만들어보려고 했는데 XSS 취약점에 관련된 이슈가 리치 텍스트 에디터(위지윅)에 심각하다는 것을 알게 되었다. 그래서 해당 이슈를 최소한으로 할 수 있는 에디터를 찾다가 토스트 UI 에디터를 선택하게 되었다. 업데이트 내용\nTOAST UI Monthly 2021년 10월호 월간 토스트 UI 2021년 10월호를 보면 XSS 취약점을 개선하기 위해서DOMPurify를 적용했다고 한다. DOMPuryfiy DOMPuryfiy는 XSS…","id":"8db559d5-8135-5389-aa54-5a9ef0d0e236"}}]},{"fieldValue":"typescript","totalCount":1,"edges":[{"node":{"frontmatter":{"slug":"/typescript/basic-summary","date":"2022년 5월 20일","title":"Typescript 기본 정리","tags":["typescript","basic","summary"]},"excerpt":"참고한 글과 강의 노마드 코더 타입스크립트로 블록체인 만들기 타입스크립트 핸드북(joshua1988) 타입추론 타입스크립트 도큐멘테이션 기록의 힘 [TypeScript] 타입스크립트 함수 오버로딩 : Function Overloading 토스트 UI 타입스크립트의 Never 타입 완벽 가이드 Types vs. interfaces in TypeScript Type vs Interface…","id":"18fd1747-5fd1-5033-aa29-75444e3b95e6"}}]},{"fieldValue":"useFetch","totalCount":1,"edges":[{"node":{"frontmatter":{"slug":"/react/custom-hook-useFetch","date":"2022년 3월 31일","title":"useFetch 만들기","tags":["javascript","react","custom hook","useFetch"]},"excerpt":"useFetch는 만들어 놓으면 사용할 때가 많아서 편리하다. React에서 서버와 비동기로 데이터를 주고 받는 경우가 많기 때문이다. useFetch가 없다면 비동기로 데이터를 주고 받을 때마다 복잡한 코드를 계속 작성해야한다. 불필요한 반복을 제거하기 위해서 useFetch를 만들었다. 처음에는 GET만 됐다. 하지만 POST, DELETE같은 다른 method에서도 사용이 가능해야했다. useFetch를 범용으로 만든 과정을 기록한다. 아울러 Typescript를 함께 사용하면서 오류를 해결한 과정도 함께 기록한다. GET부터 천천히 useFetch가 GET에서만 동작한다면 그다지 복잡하지 않다. 구글링만 잘 해도 수많은 예제가 나온다. 사실 useState, useEffect만 잘 활용해도 쉽게 만들 수 있다. 만들면서 Typescript에서 빨간색 밑줄이 쳐질때 interface로 type…","id":"e3631357-c549-5bf2-8340-5fded6bd1963"}}]},{"fieldValue":"validation","totalCount":2,"edges":[{"node":{"frontmatter":{"slug":"/form-validation","date":"2021년 11월 12일","title":"Form Validation","tags":["ajax","javascript","validation","form"]},"excerpt":"폼을 검증하는 것은 사용자 경험에 좋은 영향을 준다. 회원가입이나 로그인을 할 때, 서식 쓰기를 거부하거나 회원 인증을 거부하면 왜 그런지 이유를 알려주어야한다. 그러지 않을 경우 사용자는 미궁속에 빠지게 될 것이다. 이전에 서식 검증 코드를 만들었지만 코드가 작동만 할 뿐이었다. 그래서 서식 검증 코드를 조금 손봐서 다시 작성하기로 했다. 기존의 서식 검증 코드는 프론트에서 글자수나 필수적으로 들어가야하는 문자에 대해서만 검증을 했다. 회원 가입 버튼을 눌렀을 때, 백앤드에서 아이디 중복이나 비밀번호 검증을 했다. 하지만 이 절차가 매우 불편했다. 왜냐하면 사용자가 이메일을 입력했을 때, 사용할 수 있다고 알려주었는데 회원 가입 버튼을 누르자 다시 이메일이 중복된다는 메시지를 프론트에 출력했기 때문에 사용자가 두 번 일을 해야했기 때문이다. 게다가 switch…","id":"a82b33d6-b2ba-58eb-bbcf-87f0c1806a8c"}},{"node":{"frontmatter":{"slug":"/validation-in-front-end","date":"2021년 9월 02일","title":"Front에서 양식 검증하기","tags":["ajax","javascript","validation"]},"excerpt":"다시 컴퓨터에 앉았다. 저번 구상대로 모든 것을 싹 바꾸기로 했다. 일단 프론트에서 회원가입 양식을 받아서 값을 먼저 검증하기로 했다. 그래서 기존에 회원 가입 양식을 확인하는 절차를 만들었다. 저번에 구상했던 것을 전부 뒤집어 엎었지만 지금이 코드 가독성이나 작동 측면이나 모든 면에서 훨씬 좋은 것 같다. 괜히 sessionStorage를 사용하지 않아도 된다. 일단 document에서 input값을 불러오는 것을 내가 반복하기가 너무 싫었다.(나는 게으르니까...) 그래서 querySelectAll을 사용해서 input을 전부 불러오기로 했다. 그럼 유사 배열로 input을 전부 불러올 수 있다. 만든 객체를 checkJoinData에 넘겨주고나면 객체 값을 검증하는 함수를 짰다. 최대한 반복을 피하고 싶었다. 그런데 왜 함수가 결국 거기서 거기인 것 같을까. 어쨌든 객체에 저장된 키 값을 각각 email, name, username, password…","id":"bca4fe98-1f3e-5f6f-b8c5-d145ab730647"}}]},{"fieldValue":"web","totalCount":3,"edges":[{"node":{"frontmatter":{"slug":"/http/rest-api","date":"2022년 1월 26일","title":"REST API","tags":["web","http","rest api"]},"excerpt":"REST? 정의와 개념 REST는 REpresentational State Transfer의 약자로 용어에서 나온 것처럼 표현의 상태를 전달을 뜻한다. 어떤 자원에 대해서 CRUD 연산을 수행하기 위해서 URI로 GET, POST, PUT, PETCH, DELETE 등의 method를 요청을 보낸다. 요청은 json이나 xml등의 형태로 요청 자원을 보낼 수 있다. REST의 구성 요소 Resource(URI), Method(행위), 표현(Representation of Resource)가 있다. 자원(resource) 모든 자원에는 고유한 id가 존재한다. 이 자원은 server에 존재한다. 자원을 구별하는 id는 http url이다. 클라이언트는 URI를 이용해 자원을 지정하고, 자원의 상태에 대한 조작을 server에 요청한다. 행위(method) http 프로토콜의 method를 사용한다. get : read. 정보 요청 post : create…","id":"d4b67f74-9967-5980-a918-8f01713fe0af"}},{"node":{"frontmatter":{"slug":"/http/cooki-and-session","date":"2022년 1월 02일","title":"쿠키와 세션","tags":["web","cookie","session"]},"excerpt":"기본적인 웹 보안을 공부하다가 갑자기 쿠키로 다시 오게 되었다. 내가 알고 있는 지식이 하나의 파편 조각처럼 흩어져 있을 뿐 연결이 제대로 되지 않는 기분이다. 어쨌든 쿠키와 세션이 무엇인지 역할은 무엇인지 기능적으로 어떻게 작동하는지 등을 이참에 정리하기로 마음먹었다. 쿠키 학습 방향 쿠키가 뭘까? 쿠키는 왜 생겼을까? 쿠키가 없다면? 쿠키는 어떻게 동작할까? NodeJS 환경에서 ExpressJS를 활용해 쿠키를 만드는 방법 다루지 않는 것\n쿠키의 종류\n쿠키와 관련된 보안 이슈\n참조에 한국 인터넷 진흥원의 인터넷사이트 쿠키(Cookie)의 주요 이슈 및 취약점 분석을 읽어보기를 바란다. 쿠키란? 쿠키는 HTTP…","id":"65055b9c-f23d-51f4-9d22-dfe6096db0d9"}},{"node":{"frontmatter":{"slug":"/http/about-http","date":"2021년 11월 21일","title":"HTTP(Hypertext Transfer Protocol)","tags":["web","http"]},"excerpt":"클라이언트와 서버간의 소통 방법은 무엇이 있을까? 글 전체 참조 MDN - HTTP HTTP 완벽 가이드 [10분 테코톡] 🧃쿨라임의 HTTP/1.1, HTTP/2, 그리고 QUIC 개요 클라이언트와 서버 HTTP는 HTML 문서와 같은 리소스들을 가져올 수 있도록 해주는 프로토콜이다. HTTP는 웹에서 이루어지는 모든 데이터 교환의 기초이며, 클라이언트-서버 프로토콜이기도 하다. HTTP 클라이언트의 요청과 HTTP 서버의 응답은 www의 기본 요소다.클라이언트-서버 프로토콜은 수신자 측에 의해 요청이 초기화되는 프로토콜을 의미한다. 하나의 완전한 문서는 텍스트, 레이아웃, 설명, 이미지, 비디오, 스크립트 등 불러온 하위 문서들로 제구성된다. 리소스 웹 서버는 리소스를 관리하고 제공한다. 그림, 워드파일, HTML, Javscript 등 어떤 종류의 콘텐츠도 리소스가 될 수 있다. 미디어 타입 인터넷은 수천가지 데이터 타입을 다루기 때문에 HTTP…","id":"6b1084d3-6d45-5592-8301-0459f1bb720e"}}]},{"fieldValue":"webpack","totalCount":1,"edges":[{"node":{"frontmatter":{"slug":"/javascript/webpack-5","date":"2022년 2월 10일","title":"WebPack5","tags":["webpack","module"]},"excerpt":"깃헙 주소 웹팩이란? 웹팩의 컨셉은 module을 한데 모아 하나 이상의 파일로 build 한다. 웹팩은 정적이다. ES6 모듈이 있는데 bunlder를 사용하는 것은 조금 블랙 코미디 같지만 세상 이치가 꼭 표준대로 돌아가지 않으니까. 대신 새로운 기술이 나오는 대로 여러 브라우저에서 효과적으로 적용될 수 있도록 도구가 있다는 사실이 감사할 뿐이다. 웹펙은 모듈 번들러이기 때문에 module로 작성된 자바스크립트 코드를 롤업하는 역할을 주로 한다. 여러개로 나뉜 현대 자바스크립트를 클래식 자바스크립트로 변환해서 사용할 수 있다. 모듈을 공부하면서 이렇게 하는 이유에 대해서 몇가지 읽어봤는데, 현재 모든 브라우저가 ES6 module을 지원하고 있지 않고, 성능 이슈가 있기 때문이다. 모듈을 공부하기 이전에 웹팩을 그냥 설치해서 썼다. 하지만 계속 오류를 만나기도 하고, 막상 혼자서 webpack…","id":"0b4d2f2c-f8fc-5714-a191-0542b69e265b"}}]},{"fieldValue":"개발일기","totalCount":4,"edges":[{"node":{"frontmatter":{"slug":"/review/diary-4","date":"2022년 7월 02일","title":"양청 플젝 회고","tags":["개발일기","회고","etc"]},"excerpt":"내 기준으로 3번째 스프린트가 끝났다. 프로젝트 회고를 스프린트로 나눈 이유는 아직 모든 기능이 완성된 것이 아니기 때문이다. 너무 큰 덩어리로 프로젝트를 바라보니까 지치는 것 이상으로 개발 효율이 나지 않았다. 그래서 나름 스프린트 단위로 나눠서 기획과 디자인, 개발을 한 사이클로 정해서 프로젝트를 진행하기로 했다. 테스트까지 포함 되어야하는데 테스트가 계속 생략되고 있다. 어쨌든… 각설하고 프로젝트를 스프린트 단위로 3번까지 진행을 하면서 어떤 것을 배웠었는지 다시 한번 상기하기 위해 회고록을 작성한다. 스프린트…","id":"a830d87b-5b9e-5075-8af6-2937bd24fde2"}},{"node":{"frontmatter":{"slug":"/review/diary-3","date":"2022년 4월 26일","title":"4월 26일 개발 일기","tags":["개발일기","etc"]},"excerpt":"TLDR 주절주절이라 해결 방법을 구하려는 분께는 별 도움 안되는 아티클입니다. 리액트로 리빌딩하기 React로 뭘 만들어보자고 하고 이전에 바닐라 자바스크립트로 만들었던 웹 앱을 리액트로 다시 만들었다. 먼저 하고 있는 서비스를 정상적으로 동작 시키기까지 많은 우여 곡절이 있었다. 쿠키와 Same Site 옵션 일단 쿠키에서 문제가 발생했다. CSRF 공격을 예방하기 위해서 토큰을 사용했었다. 히로쿠에서 클라이언트와 서버를 따로 만들어서 동작을 시키자 동작을 하지 않았다. 쿠키를 정상적으로 주고받지 못했기 때문이었다. 경고 메시지를 보면 Same Site 옵션이 문제였다. 브라우저에서 Same Site가 true이거나 lax이면 도메인이 다른 서버에서 클라이언트에 쿠키를 발행해주지 않았다. 그래서 옵션을 none으로 변경했고 잘 동작하는 줄 알았다. 그런데 로컬에서만 동작하고 배포 환경에서는 동작하지 않았다. 이것 저것 찾아보다보니 유튜브에서 🎥라매개발자의 Heroku…","id":"a246808c-cb50-5b8c-b025-f92819c9bea8"}},{"node":{"frontmatter":{"slug":"/review/diary-2","date":"2022년 3월 29일","title":"맨탈을 관리하는 가장 좋은 방법","tags":["개발일기","etc"]},"excerpt":"맨탈 바사삭 매우 기념비적인 날이다. 지금까지 지원했던 모든 회사에서 탈락했다. 50군데 정도 된다. 맨탈이 바사삭 부서지는 소리가 들리지만 지금 하는 것을 멈출수는 없다. 지금 하는 것을 꾸준하게 계속 해서 결과물을 만드는 것이 좋은 정신 상태를 유지하는 가장 좋은 방법인 것 같다. 50군데 떨어졌다면 답은 나왔다. 이력서를 수정해야한다. 내가 제출한 포트폴리오가 그다지 매력적이지 않은 것도 덤이다. 이번에 2라운드를 준비하면서 내가 기술로 해결하고 싶은 문제가 무엇인지 곰곰히 생각해보는 시간을 가져야겠다. 사무 자동화로 다른 사람의 시간을 아껴주었을 때 즐거움이 이번 프로젝트에서 드러났으면 좋겠다. 지금 하고 있는 것 지금은 과거에 바닐라 자바스크립트로 만들었던 웹 페이지를 리액트와 타입스크립트를 사용해서 새로 마이그레이션 하고 있다. 백앤드 서버는 그대로 두고(사실 그대로 둘 수가 없다. 엉망 진창이다.) 프론트를 만들어서 디폴로잉까지 할 예정이다. REST API 이미 MVC…","id":"07b82038-c3ae-564d-808c-ce8859615161"}},{"node":{"frontmatter":{"slug":"/review/diary-1","date":"2022년 3월 23일","title":"3월 23일 개발일기","tags":["개발일기","etc"]},"excerpt":"Gatsby로 개인 블로그 만들기 Gatsby를 사용해서 블로그를 만들었다. 나의 의도를 표현하기 위해서는 작은 서비스를 만들어보는 것이 가장 좋은 것 같다. 추상적으로 누군가에게 \"React로 서비스를 만들 수 있습니다.\"라고 말하는 것보다 직접 만들어보는 것이 나에게 도움이 많이 되는 것 같다. 너무 당연한 이야기이지만 지금까지 너무 이론에만 치중해있었던게 아닌가하는 생각이 들었다. 만들면서 겪은 작은 시행착오들이 나를 돌아보게 하는 것 같다. 이력서 블로그를 만들었으니 이제 이력서를 수정해야한다. 지금까지 이력서를 40군데 정도 넣었다. 감사하게도 관심을 가지고 면접을 제안하는 기업도 있었다. 하지만 과제 면접은 두 곳밖에 보지 못했다. 한번도 사용해본적 없는 Vue를 사용해서 과제를 제출해봤다. 또 바닐라 자바스크립트로 SPA 어플리케이션을 만들어보기도 했다. 만들면서 많은 공부가 됐다. 옵저버 패턴이란 것도 공부해보고 Proxy…","id":"d497e021-aeef-5485-a934-994bd6772444"}}]},{"fieldValue":"관심사 분리","totalCount":1,"edges":[{"node":{"frontmatter":{"slug":"/review/refactoring1","date":"2022년 8월 18일","title":"API 호출 함수 대수술","tags":["리펙토링","관심사 분리","etc"]},"excerpt":"대수술이었다. 약 10시간 정도 걸렸다. 이 일을 한 발단은 원티드 프리 온보딩 코스를 들으면서 관심사의 분리를 듣고 시작했다. 할 일 목록 생성 어플을 만들다가 내 프로젝트에 일괄적으로 적용해봐도 괜찮겠다 싶었다. 나의 코드를 열어서 다시 보는 순간 분명 약 1개월 정도밖에 되지 않은 코드인데 썩은 내가 나는 것 같았다. 무슨 의도로 이렇게 난해하게 작성을 했는지 모르겠다. 아마 그때 당시에는 ‘동작’하니까 이렇게 작성했을 것 같다. 만약에 이게 회사였다면 PR 승인도 못받았을 것 같은 느낌적인 느낌. 이번 리펙토링의 큰 줄기는 관심사의 분리다. 그리고 세부적으로 API를 호출하는 함수와 뷰를 최대한 분리하였다. 마침 몇개월 전에 스프린트를 끝내면서 이슈를 하나 남겨놓았었다. 그때도 이 부분이 고민이긴 했나보다. 불분명한 이름 변경하기 아래 코드는 서버에 Get 요청을 위해서 만들어진 코드다. 제네릭 타입을 지정할 때, T…","id":"d1d34086-74c1-5c80-8956-9422df9c29b4"}}]},{"fieldValue":"리펙토링","totalCount":1,"edges":[{"node":{"frontmatter":{"slug":"/review/refactoring1","date":"2022년 8월 18일","title":"API 호출 함수 대수술","tags":["리펙토링","관심사 분리","etc"]},"excerpt":"대수술이었다. 약 10시간 정도 걸렸다. 이 일을 한 발단은 원티드 프리 온보딩 코스를 들으면서 관심사의 분리를 듣고 시작했다. 할 일 목록 생성 어플을 만들다가 내 프로젝트에 일괄적으로 적용해봐도 괜찮겠다 싶었다. 나의 코드를 열어서 다시 보는 순간 분명 약 1개월 정도밖에 되지 않은 코드인데 썩은 내가 나는 것 같았다. 무슨 의도로 이렇게 난해하게 작성을 했는지 모르겠다. 아마 그때 당시에는 ‘동작’하니까 이렇게 작성했을 것 같다. 만약에 이게 회사였다면 PR 승인도 못받았을 것 같은 느낌적인 느낌. 이번 리펙토링의 큰 줄기는 관심사의 분리다. 그리고 세부적으로 API를 호출하는 함수와 뷰를 최대한 분리하였다. 마침 몇개월 전에 스프린트를 끝내면서 이슈를 하나 남겨놓았었다. 그때도 이 부분이 고민이긴 했나보다. 불분명한 이름 변경하기 아래 코드는 서버에 Get 요청을 위해서 만들어진 코드다. 제네릭 타입을 지정할 때, T…","id":"d1d34086-74c1-5c80-8956-9422df9c29b4"}}]},{"fieldValue":"이력서","totalCount":1,"edges":[{"node":{"frontmatter":{"slug":"/resume/","date":"2022년 3월 21일","title":"이력서","tags":["이력서"]},"excerpt":"프론트 앤드 개발자 고현수입니다. 안녕하세요. 프론트 앤드 개발자 고현수입니다. 함께 일하는 동료와 함께 좋은 서비스를 만들기 위해 최선을 다하겠습니다. 디자인을 했던 경험을 바탕으로 사용자가 읽기 편한 화면을 만드려고 노력합니다. 좋은 코드를 작성하기 위해서 이미 완성된 코드를 계속 돌아보고 개선하려고 노력합니다. 최신 기술 동향을 항상 살펴보고 사용해보면서 웹 기술 트랜드를 이해하고 저의 프로젝트에 적용해 보려고 노력합니다. 함께 일하는 것을 좋아합니다. 여러 사람들과 소통하고 문제를 개선해 나가는 것을 좋아합니다. Contact Me Email : movie3342@gmail.com Github : https://github.com/movie42 blog : https://movie42.github.io 개인 프로젝트 누구나 키오스크 개요 깃허브 저장소 서비스 바로가기 목적 : 누구나 가볍게 사용할 수 있는 키오스크 어플리케이션 역할 Front-end…","id":"bfefc83b-98b1-5a7e-922a-f7990075bda0"}}]},{"fieldValue":"회고","totalCount":1,"edges":[{"node":{"frontmatter":{"slug":"/review/diary-4","date":"2022년 7월 02일","title":"양청 플젝 회고","tags":["개발일기","회고","etc"]},"excerpt":"내 기준으로 3번째 스프린트가 끝났다. 프로젝트 회고를 스프린트로 나눈 이유는 아직 모든 기능이 완성된 것이 아니기 때문이다. 너무 큰 덩어리로 프로젝트를 바라보니까 지치는 것 이상으로 개발 효율이 나지 않았다. 그래서 나름 스프린트 단위로 나눠서 기획과 디자인, 개발을 한 사이클로 정해서 프로젝트를 진행하기로 했다. 테스트까지 포함 되어야하는데 테스트가 계속 생략되고 있다. 어쨌든… 각설하고 프로젝트를 스프린트 단위로 3번까지 진행을 하면서 어떤 것을 배웠었는지 다시 한번 상기하기 위해 회고록을 작성한다. 스프린트…","id":"a830d87b-5b9e-5075-8af6-2937bd24fde2"}}]}],"edges":[{"node":{"id":"b29a24b3-667a-506c-91f5-67c5c11864a8","excerpt":"결론부터 말합니다. TLDL; 아래 글은 저의 일기와 같은 형식으로 되어있습니다. 해결 과정이 궁금하면 읽으세요. 제가 찾은 해결 방법만 적용하고 싶다면 이 파트만 읽으세요. 참조 Removing FOUC in a Gatsby Project install package FOUC는 스타일 컴포넌트 문제일 수도 있고 @import를 사용하여 불러온 웹 폰트 때문일 수도 있습니다. styled-components 때문이라면\n, , , @import된 font 때문이라면\n, ,  둘 다라면 둘 다 설치 setup gatsby-config.js typography 경로를 src/utils/typography로 설정했습니다. setup layout with Globalstyle Globalstyle @import를 삭제하세요. layout 레이어 아웃에 적용 후 용도별로 서브 레이어아웃을 만들어서 반드시 각각 page 컴포넌트에 적용해주어야합니다. 참조 jeonghwan-kim…","frontmatter":{"date":"2022년 8월 22일","slug":"/나의_블로그와_FOUC","title":"나의 블로그에서 FOUC 없애기","tags":["FOUC","gatsby","front-end"]}}},{"node":{"id":"d1d34086-74c1-5c80-8956-9422df9c29b4","excerpt":"대수술이었다. 약 10시간 정도 걸렸다. 이 일을 한 발단은 원티드 프리 온보딩 코스를 들으면서 관심사의 분리를 듣고 시작했다. 할 일 목록 생성 어플을 만들다가 내 프로젝트에 일괄적으로 적용해봐도 괜찮겠다 싶었다. 나의 코드를 열어서 다시 보는 순간 분명 약 1개월 정도밖에 되지 않은 코드인데 썩은 내가 나는 것 같았다. 무슨 의도로 이렇게 난해하게 작성을 했는지 모르겠다. 아마 그때 당시에는 ‘동작’하니까 이렇게 작성했을 것 같다. 만약에 이게 회사였다면 PR 승인도 못받았을 것 같은 느낌적인 느낌. 이번 리펙토링의 큰 줄기는 관심사의 분리다. 그리고 세부적으로 API를 호출하는 함수와 뷰를 최대한 분리하였다. 마침 몇개월 전에 스프린트를 끝내면서 이슈를 하나 남겨놓았었다. 그때도 이 부분이 고민이긴 했나보다. 불분명한 이름 변경하기 아래 코드는 서버에 Get 요청을 위해서 만들어진 코드다. 제네릭 타입을 지정할 때, T…","frontmatter":{"date":"2022년 8월 18일","slug":"/review/refactoring1","title":"API 호출 함수 대수술","tags":["리펙토링","관심사 분리","etc"]}}},{"node":{"id":"a830d87b-5b9e-5075-8af6-2937bd24fde2","excerpt":"내 기준으로 3번째 스프린트가 끝났다. 프로젝트 회고를 스프린트로 나눈 이유는 아직 모든 기능이 완성된 것이 아니기 때문이다. 너무 큰 덩어리로 프로젝트를 바라보니까 지치는 것 이상으로 개발 효율이 나지 않았다. 그래서 나름 스프린트 단위로 나눠서 기획과 디자인, 개발을 한 사이클로 정해서 프로젝트를 진행하기로 했다. 테스트까지 포함 되어야하는데 테스트가 계속 생략되고 있다. 어쨌든… 각설하고 프로젝트를 스프린트 단위로 3번까지 진행을 하면서 어떤 것을 배웠었는지 다시 한번 상기하기 위해 회고록을 작성한다. 스프린트…","frontmatter":{"date":"2022년 7월 02일","slug":"/review/diary-4","title":"양청 플젝 회고","tags":["개발일기","회고","etc"]}}},{"node":{"id":"305b5e2d-d9e4-5364-89c4-1cf0683f51c9","excerpt":"Test 코드를 작성하는 방법은 velopert의 TDD 개발 흐름으로 투두리스트 만들기와 The Net Nija의 React Testing Library 튜토리얼을 따라하면서 작성하는 방법을 익혔다. React로 개발을 하다보면 다양한 library를 사용하게 된다. 대표적으로 상태 관리 도구를 사용하는 환경에서 React 상태를 관리하게 된다. 나는 Recoil을 사용하는 상태 관리 도구로 사용하는 환경에서 TDD를 하는 방법을 연습하였다. Recoil 테스트 코드 참조 https://codesandbox.io/s/testing-recoil-fctje?file=/src/Message.tsx Recoil은 atom으로 개발자가 관리하려는 상태 값을 생성한다. 원자 단위로 상태를 관리한다는 의미에서 atom이라고 이름을 짓지 않았나 생각해본다. 생성된 atom은 컴포넌트 안에서 useRecoilState라는 훅으로 사용할 수 있다. useState…","frontmatter":{"date":"2022년 6월 04일","slug":"/test/test-practice-2-recoil","title":"React Testing Library 연습(2) - Recoil과 테스트","tags":["test","basic","summary","react","front-end"]}}},{"node":{"id":"8151a3f9-2a91-58ab-8265-851aaccf30a3","excerpt":"테스트 코드가 필요하다고 생각하게 된 계기는 어플리케이션의 상태를 내가 눈으로 직접 확인하며고 일일이 클릭해가면서 동작을 예측하는데 한계가 왔다고 느꼈기 때문이다. 이전부터 테스트가 있다는 것은 알았고 유튜브에서 떠도는 동영상을 봤지만 실상 내가 하는 프로젝트에서 테스트 코드를 작성하면서 개발을 진행하지 않았다. 세팅도 어렵게 느껴졌고 무엇보다 ‘무엇을 테스트 해야할까?’를 잘 몰랐다. 하지만 테스트가 정말 필요해진 시점에서 더이상 미룰 수가 없었다. 그래서 자료를 이것 저것 찾아보면서 테스트의 기초적인 것을 보게 되었고 먼저 테스트 코드를 작성하는 것에 익숙해지기로 했다. 읽기 전에 이 글은 튜토리얼이 아니며 다른 튜토리얼을 보고 배운 것을 정리한 글입니다. 튜토리얼은 테스트에 익숙해지기 좋은 자료를 참고하는 것을 권장합니다. 저의 개인적인 생각이 포함되어있습니다.(학술적이지 않음.) 테스트에 익숙해지기에 좋은 자료 The Net Ninja - React Testing…","frontmatter":{"date":"2022년 5월 31일","slug":"/test/test-practice-1","title":"React Testing Library 연습 (1) - 테스트 익숙해지기","tags":["test","basic","summary","react","front-end"]}}},{"node":{"id":"18fd1747-5fd1-5033-aa29-75444e3b95e6","excerpt":"참고한 글과 강의 노마드 코더 타입스크립트로 블록체인 만들기 타입스크립트 핸드북(joshua1988) 타입추론 타입스크립트 도큐멘테이션 기록의 힘 [TypeScript] 타입스크립트 함수 오버로딩 : Function Overloading 토스트 UI 타입스크립트의 Never 타입 완벽 가이드 Types vs. interfaces in TypeScript Type vs Interface…","frontmatter":{"date":"2022년 5월 20일","slug":"/typescript/basic-summary","title":"Typescript 기본 정리","tags":["typescript","basic","summary"]}}},{"node":{"id":"a246808c-cb50-5b8c-b025-f92819c9bea8","excerpt":"TLDR 주절주절이라 해결 방법을 구하려는 분께는 별 도움 안되는 아티클입니다. 리액트로 리빌딩하기 React로 뭘 만들어보자고 하고 이전에 바닐라 자바스크립트로 만들었던 웹 앱을 리액트로 다시 만들었다. 먼저 하고 있는 서비스를 정상적으로 동작 시키기까지 많은 우여 곡절이 있었다. 쿠키와 Same Site 옵션 일단 쿠키에서 문제가 발생했다. CSRF 공격을 예방하기 위해서 토큰을 사용했었다. 히로쿠에서 클라이언트와 서버를 따로 만들어서 동작을 시키자 동작을 하지 않았다. 쿠키를 정상적으로 주고받지 못했기 때문이었다. 경고 메시지를 보면 Same Site 옵션이 문제였다. 브라우저에서 Same Site가 true이거나 lax이면 도메인이 다른 서버에서 클라이언트에 쿠키를 발행해주지 않았다. 그래서 옵션을 none으로 변경했고 잘 동작하는 줄 알았다. 그런데 로컬에서만 동작하고 배포 환경에서는 동작하지 않았다. 이것 저것 찾아보다보니 유튜브에서 🎥라매개발자의 Heroku…","frontmatter":{"date":"2022년 4월 26일","slug":"/review/diary-3","title":"4월 26일 개발 일기","tags":["개발일기","etc"]}}},{"node":{"id":"fc25a843-0262-515d-b4b5-cd23523abd61","excerpt":"프로젝트를 진행하면서 여러개의 form 데이터를 서버로 전송해야하는 로직이 필요했다. react-hook-form을 사용하면 매우 간편하게 form 데이터를 모을 수 있다. 공식 문서에서 다양한 예제를 제공하고 있기 때문에 서식을 개발 할 때 쉽게 개발이 가능하다. 여러 데이터 한번에 수정하기 지금까지 사용해봤던 CMS 툴은 수정을 할 때, 데이터를 개별적으로만 수정이 가능했기 때문에 매우 불편했다. 물론 제공하고 있는 옵션이 많기 때문이고, 여러 가지를 한번에 수정할 필요가 없기 때문일 수도 있다. 하지만 지금 만들고 있는 프로젝트에서 상품 등록을 위한 서식은 매우 간소했다. 간소한 작업이 여러번 반복되면 사용자 입장에서 짜증이 날 것 같았다. selectItem을 받아서 화면에 수정해야할 product를 개별적으로 그려줄 수 있다. FormField를 재사용이 가능하도록 설계하기 위해서 몇 가지를 컴포넌트로 만들어주어야한다. 먼저 input 등 form…","frontmatter":{"date":"2022년 4월 21일","slug":"/react/many-form","title":"react-hook-form으로 여러개의 폼 데이터 전송하기","tags":["javascript","react","hooks","team project"]}}},{"node":{"id":"4cb3dd86-82ac-526d-992d-90fbbccd01c5","excerpt":"매력적인 제목을 짓지 못해 라이트 노벨과 같은 제목처럼 길게 썼다. 3일차까지 하면서 겪은 문제를 한번 정리하고 넘어가야겠다고 생각해서 거의 회고와 같은 형식으로 적는다. 쓰면 쓸 수록 좋으면서도 싫은 TypeScript 타입 스크리트는 전달받을 객체가 무엇인지 예측 할 수 있기 때문에 생각보다 실수를 할일이 적어진다. 또 다른 한편으로 상태를 내가 생각하면서 설계를 하기 때문에 코드를 조금 더 생각하면서 작성하게 되는 것 같다. 예상치 못한 상태를 받는 경우 빨간줄이 쳐지는데 그럴 때, 메시지를 잘 읽어보면 왜 오류가 났는지 잘 설명해준다. 그런데 항상 설명을 보았다고 바로 해결할 수는 없다. 대부분의 오류는 어떤 interface나 type을 상속받고 있는데 그곳에 undefiened나 null…","frontmatter":{"date":"2022년 4월 05일","slug":"/etc/kiosk-team-project-2","title":"프로젝트를 하면서 겪은 문제, Typescript와 StyledComponent, Event, Component 설계하기","tags":["team project","etc"]}}},{"node":{"id":"edb5cdbe-82dc-51d9-89e7-9f65da47d02f","excerpt":"팀 프로젝트를 시작했다. 감사하게도 프론트앤드 개발하시는 분이 한분 합류해주셨다. 아쉽게도 백앤드 팀원을 구하지 못해서 해야 할 일이 배로 늘게 되었지만 어차피 지금까지 배웠던 것을 복습한다고 생각하고 처음부터 진행하기로 했다. 백앤드 개발자는 구해지는 대로 협의를 하여서 맡기기로 했다. 프로젝트 세팅하기 프로젝트 세팅은 생각보다 시간이 많이 걸렸다. 약 10시간정도의 시간을 가지고 프로젝트를 세팅했다 처음 세팅하는 것이기 때문에 구글에서 이것 저것 찾아보면서 세팅을 했다. 설계 Figma를 사용해서 기본 틀을 그렸다. 구성은 로그인화면 관리자 화면, 고객 화면, 상품 관리 화면, 크루 화면으로 나눴다. 피자 배달을 하면서 불편했던 점을 반영하려고 했다. 피그마를 사용하면서 component 단위로 설계할 수 있어서 정말 편했다. 복잡한 디자인이 아니라면 프론트 앤드 개발자라면 쉽게 사용할 수 있었다. Git git…","frontmatter":{"date":"2022년 4월 03일","slug":"/etc/kiosk-team-project-1","title":"누구나 키오스크 팀 프로젝트 시작","tags":["team project","etc"]}}},{"node":{"id":"e3631357-c549-5bf2-8340-5fded6bd1963","excerpt":"useFetch는 만들어 놓으면 사용할 때가 많아서 편리하다. React에서 서버와 비동기로 데이터를 주고 받는 경우가 많기 때문이다. useFetch가 없다면 비동기로 데이터를 주고 받을 때마다 복잡한 코드를 계속 작성해야한다. 불필요한 반복을 제거하기 위해서 useFetch를 만들었다. 처음에는 GET만 됐다. 하지만 POST, DELETE같은 다른 method에서도 사용이 가능해야했다. useFetch를 범용으로 만든 과정을 기록한다. 아울러 Typescript를 함께 사용하면서 오류를 해결한 과정도 함께 기록한다. GET부터 천천히 useFetch가 GET에서만 동작한다면 그다지 복잡하지 않다. 구글링만 잘 해도 수많은 예제가 나온다. 사실 useState, useEffect만 잘 활용해도 쉽게 만들 수 있다. 만들면서 Typescript에서 빨간색 밑줄이 쳐질때 interface로 type…","frontmatter":{"date":"2022년 3월 31일","slug":"/react/custom-hook-useFetch","title":"useFetch 만들기","tags":["javascript","react","custom hook","useFetch"]}}},{"node":{"id":"07b82038-c3ae-564d-808c-ce8859615161","excerpt":"맨탈 바사삭 매우 기념비적인 날이다. 지금까지 지원했던 모든 회사에서 탈락했다. 50군데 정도 된다. 맨탈이 바사삭 부서지는 소리가 들리지만 지금 하는 것을 멈출수는 없다. 지금 하는 것을 꾸준하게 계속 해서 결과물을 만드는 것이 좋은 정신 상태를 유지하는 가장 좋은 방법인 것 같다. 50군데 떨어졌다면 답은 나왔다. 이력서를 수정해야한다. 내가 제출한 포트폴리오가 그다지 매력적이지 않은 것도 덤이다. 이번에 2라운드를 준비하면서 내가 기술로 해결하고 싶은 문제가 무엇인지 곰곰히 생각해보는 시간을 가져야겠다. 사무 자동화로 다른 사람의 시간을 아껴주었을 때 즐거움이 이번 프로젝트에서 드러났으면 좋겠다. 지금 하고 있는 것 지금은 과거에 바닐라 자바스크립트로 만들었던 웹 페이지를 리액트와 타입스크립트를 사용해서 새로 마이그레이션 하고 있다. 백앤드 서버는 그대로 두고(사실 그대로 둘 수가 없다. 엉망 진창이다.) 프론트를 만들어서 디폴로잉까지 할 예정이다. REST API 이미 MVC…","frontmatter":{"date":"2022년 3월 29일","slug":"/review/diary-2","title":"맨탈을 관리하는 가장 좋은 방법","tags":["개발일기","etc"]}}},{"node":{"id":"c45dec81-17a4-5562-9f85-f99041cc2a55","excerpt":"TLDR 단순 정리 클론 코딩을 하면서 React를 공부했다. 공부하면서 주입되는 건 많은데 정리를 게을리했다. 애초에 '나중에 한방에 정리해야지'라고 생각하고 넘어갔기 때문이다. 개발자의 세계에서 나중은 결코 오지 않는다. 그래서 시간이 좀 걸리더라도 지금까지 리액트 프로젝트를 하면서 배운 것을 정리한다. ENV SETTING 환경 설정은 나에게 맞는 것을 선택해서 하면 된다. 많은 사람들이 create-react-app으로 리액트를 사용한다. 처음부터 리액트를 세팅하는 방법도 있다. 아티클을 참고하는 편이 좋다. Creating your React project from scratch without create-react-app: The Complete Guide. create-react-app create-react-app with Typescript react with vite HOOKS React Hook은 React v16.8부터 React 요소로 추가되었다. React…","frontmatter":{"date":"2022년 3월 24일","slug":"/react/hooks","title":"여러가지 React 프로젝트를 클론 코딩하면서 배운 것","tags":["javascript","react","hooks"]}}},{"node":{"id":"d497e021-aeef-5485-a934-994bd6772444","excerpt":"Gatsby로 개인 블로그 만들기 Gatsby를 사용해서 블로그를 만들었다. 나의 의도를 표현하기 위해서는 작은 서비스를 만들어보는 것이 가장 좋은 것 같다. 추상적으로 누군가에게 \"React로 서비스를 만들 수 있습니다.\"라고 말하는 것보다 직접 만들어보는 것이 나에게 도움이 많이 되는 것 같다. 너무 당연한 이야기이지만 지금까지 너무 이론에만 치중해있었던게 아닌가하는 생각이 들었다. 만들면서 겪은 작은 시행착오들이 나를 돌아보게 하는 것 같다. 이력서 블로그를 만들었으니 이제 이력서를 수정해야한다. 지금까지 이력서를 40군데 정도 넣었다. 감사하게도 관심을 가지고 면접을 제안하는 기업도 있었다. 하지만 과제 면접은 두 곳밖에 보지 못했다. 한번도 사용해본적 없는 Vue를 사용해서 과제를 제출해봤다. 또 바닐라 자바스크립트로 SPA 어플리케이션을 만들어보기도 했다. 만들면서 많은 공부가 됐다. 옵저버 패턴이란 것도 공부해보고 Proxy…","frontmatter":{"date":"2022년 3월 23일","slug":"/review/diary-1","title":"3월 23일 개발일기","tags":["개발일기","etc"]}}},{"node":{"id":"168dcd25-79d8-586a-bc75-7c8435beb451","excerpt":"invalid-hook-call-error 요즘 React로 이것저것 만들어보기 시작했다. 그러다 만나게 된 Error가 생겼다. 그런데 Error가 일관적으로 발생하는 것이라면 납득이 될텐데 조금 이상한 경우라서 기록을 하기로 했다. 먼저 Error 발생의 원인을 찾은 순서와 해결한 방법을 이야기하려고 한다. 그 다음에 Invalid Hook Call이 무엇인지 그리고 React 공식 문서에서는 어떤 해결책을 제시하고 있는지 마지막에 기록했다. 컴퓨터에 따라 Error가 나왔다 안나왔다. 나는 두 대의 컴퓨터를 사용한다. Apple Macbook Air M1 Apple iMac Intel 문제 M1에서 계속 Invalid 에러가 발생했다. 처음 Create React App으로 개발 환경을 세팅했을 때는 오류가 발생하지 않았기 때문에 패키지에서 발생하는 오류라고 추론했다. 패키지를 하나씩 지우면서 Styled-Components, createGlobalStyle…","frontmatter":{"date":"2022년 3월 22일","slug":"/react/invalid-hook-call","title":"Styled Components와 Invalid Hook Call","tags":["javascript","react","error"]}}},{"node":{"id":"bfefc83b-98b1-5a7e-922a-f7990075bda0","excerpt":"프론트 앤드 개발자 고현수입니다. 안녕하세요. 프론트 앤드 개발자 고현수입니다. 함께 일하는 동료와 함께 좋은 서비스를 만들기 위해 최선을 다하겠습니다. 디자인을 했던 경험을 바탕으로 사용자가 읽기 편한 화면을 만드려고 노력합니다. 좋은 코드를 작성하기 위해서 이미 완성된 코드를 계속 돌아보고 개선하려고 노력합니다. 최신 기술 동향을 항상 살펴보고 사용해보면서 웹 기술 트랜드를 이해하고 저의 프로젝트에 적용해 보려고 노력합니다. 함께 일하는 것을 좋아합니다. 여러 사람들과 소통하고 문제를 개선해 나가는 것을 좋아합니다. Contact Me Email : movie3342@gmail.com Github : https://github.com/movie42 blog : https://movie42.github.io 개인 프로젝트 누구나 키오스크 개요 깃허브 저장소 서비스 바로가기 목적 : 누구나 가볍게 사용할 수 있는 키오스크 어플리케이션 역할 Front-end…","frontmatter":{"date":"2022년 3월 21일","slug":"/resume/","title":"이력서","tags":["이력서"]}}},{"node":{"id":"0b4d2f2c-f8fc-5714-a191-0542b69e265b","excerpt":"깃헙 주소 웹팩이란? 웹팩의 컨셉은 module을 한데 모아 하나 이상의 파일로 build 한다. 웹팩은 정적이다. ES6 모듈이 있는데 bunlder를 사용하는 것은 조금 블랙 코미디 같지만 세상 이치가 꼭 표준대로 돌아가지 않으니까. 대신 새로운 기술이 나오는 대로 여러 브라우저에서 효과적으로 적용될 수 있도록 도구가 있다는 사실이 감사할 뿐이다. 웹펙은 모듈 번들러이기 때문에 module로 작성된 자바스크립트 코드를 롤업하는 역할을 주로 한다. 여러개로 나뉜 현대 자바스크립트를 클래식 자바스크립트로 변환해서 사용할 수 있다. 모듈을 공부하면서 이렇게 하는 이유에 대해서 몇가지 읽어봤는데, 현재 모든 브라우저가 ES6 module을 지원하고 있지 않고, 성능 이슈가 있기 때문이다. 모듈을 공부하기 이전에 웹팩을 그냥 설치해서 썼다. 하지만 계속 오류를 만나기도 하고, 막상 혼자서 webpack…","frontmatter":{"date":"2022년 2월 10일","slug":"/javascript/webpack-5","title":"WebPack5","tags":["webpack","module"]}}},{"node":{"id":"3db7f8c9-d2c4-52ba-845c-64228612eee8","excerpt":"module이란? 모듈은 캡슐화된 코드다. 단순히 캡슐화만 하여 글로벌 스페이스를 오염시키지 않는 역할로 끝나지 않고 코드를 재사용 할 수 있도록 돕는 훌륭한 도구다. 모듈이 없었을 때는 javascript design pattern이 있었다. 디자인 패턴이 유효하지 않다는 것은 아니지만 현대 자바스크립트는 모듈로 인해 디자인 패턴이 제공하는 캡슐화 보다 훨씬 더 편하게 자바스크립트 코드를 작성하고 관리하고 재사용할 수 있게 되었다. ES5에서 모듈 패턴은 대표적으로 IIFE와 Revealing Module이 있다. 캡슐화를 할 수 있다는 장점이 있지만 종속성을 제공하지 않았다. 이 한계를 극복하기 위해서 module formats이 생겨났다. IIFE IIFE는 즉시 실행 함수다. IIFE는 함수 표현식일때 사용할 수 있다. function 키워드가 맨 앞에 올 경우 자바스크립트는 함수 선언이라고 생각하기 때문에 함수 표현식이라는 것을 알려주기 위해서 앞에 +, !, ~, void…","frontmatter":{"date":"2022년 2월 09일","slug":"/javascript/javascript-module","title":"Javascript Module","tags":["javascript","module"]}}},{"node":{"id":"cab6aa38-db40-52ab-a28d-b194de710397","excerpt":"스크롤 애니메이션은 말 그대로 인터넷 브라우저의 스크롤을 사용하여 타이밍을 설계해서 유저에게 컨텐츠를 보여주는 애니메이션이다. 스크롤 애니메이션은 사용자에게 시각적으로 보다 더 다양한 경험을 제공할 수 있다. 화면이 로딩 됨과 동시에 컨텐츠가 보여지는 것이 아니고 동영상 플레이어를 재생할 때, 타임 라인을 탐색 하는 듯한 경험을 제공할 수 있다. 나는 애플 클론 수업을 수강하면서 배운 스크롤 애니메이션을 메뉴바에 적용하기로 했다. UX…","frontmatter":{"date":"2022년 1월 26일","slug":"/scroll-animation-velog","title":"스크롤 애니메이션으로 velog 메뉴 흉내내기","tags":["javascript","animation"]}}},{"node":{"id":"d4b67f74-9967-5980-a918-8f01713fe0af","excerpt":"REST? 정의와 개념 REST는 REpresentational State Transfer의 약자로 용어에서 나온 것처럼 표현의 상태를 전달을 뜻한다. 어떤 자원에 대해서 CRUD 연산을 수행하기 위해서 URI로 GET, POST, PUT, PETCH, DELETE 등의 method를 요청을 보낸다. 요청은 json이나 xml등의 형태로 요청 자원을 보낼 수 있다. REST의 구성 요소 Resource(URI), Method(행위), 표현(Representation of Resource)가 있다. 자원(resource) 모든 자원에는 고유한 id가 존재한다. 이 자원은 server에 존재한다. 자원을 구별하는 id는 http url이다. 클라이언트는 URI를 이용해 자원을 지정하고, 자원의 상태에 대한 조작을 server에 요청한다. 행위(method) http 프로토콜의 method를 사용한다. get : read. 정보 요청 post : create…","frontmatter":{"date":"2022년 1월 26일","slug":"/http/rest-api","title":"REST API","tags":["web","http","rest api"]}}},{"node":{"id":"65055b9c-f23d-51f4-9d22-dfe6096db0d9","excerpt":"기본적인 웹 보안을 공부하다가 갑자기 쿠키로 다시 오게 되었다. 내가 알고 있는 지식이 하나의 파편 조각처럼 흩어져 있을 뿐 연결이 제대로 되지 않는 기분이다. 어쨌든 쿠키와 세션이 무엇인지 역할은 무엇인지 기능적으로 어떻게 작동하는지 등을 이참에 정리하기로 마음먹었다. 쿠키 학습 방향 쿠키가 뭘까? 쿠키는 왜 생겼을까? 쿠키가 없다면? 쿠키는 어떻게 동작할까? NodeJS 환경에서 ExpressJS를 활용해 쿠키를 만드는 방법 다루지 않는 것\n쿠키의 종류\n쿠키와 관련된 보안 이슈\n참조에 한국 인터넷 진흥원의 인터넷사이트 쿠키(Cookie)의 주요 이슈 및 취약점 분석을 읽어보기를 바란다. 쿠키란? 쿠키는 HTTP…","frontmatter":{"date":"2022년 1월 02일","slug":"/http/cooki-and-session","title":"쿠키와 세션","tags":["web","cookie","session"]}}},{"node":{"id":"6b1084d3-6d45-5592-8301-0459f1bb720e","excerpt":"클라이언트와 서버간의 소통 방법은 무엇이 있을까? 글 전체 참조 MDN - HTTP HTTP 완벽 가이드 [10분 테코톡] 🧃쿨라임의 HTTP/1.1, HTTP/2, 그리고 QUIC 개요 클라이언트와 서버 HTTP는 HTML 문서와 같은 리소스들을 가져올 수 있도록 해주는 프로토콜이다. HTTP는 웹에서 이루어지는 모든 데이터 교환의 기초이며, 클라이언트-서버 프로토콜이기도 하다. HTTP 클라이언트의 요청과 HTTP 서버의 응답은 www의 기본 요소다.클라이언트-서버 프로토콜은 수신자 측에 의해 요청이 초기화되는 프로토콜을 의미한다. 하나의 완전한 문서는 텍스트, 레이아웃, 설명, 이미지, 비디오, 스크립트 등 불러온 하위 문서들로 제구성된다. 리소스 웹 서버는 리소스를 관리하고 제공한다. 그림, 워드파일, HTML, Javscript 등 어떤 종류의 콘텐츠도 리소스가 될 수 있다. 미디어 타입 인터넷은 수천가지 데이터 타입을 다루기 때문에 HTTP…","frontmatter":{"date":"2021년 11월 21일","slug":"/http/about-http","title":"HTTP(Hypertext Transfer Protocol)","tags":["web","http"]}}},{"node":{"id":"d3feb77b-76cb-5184-8f02-691abdcf2551","excerpt":"돈을 받고 일을 하고 있던 그렇지 않던지 간에 어쨌든 개발을 시작하게 되면 누구나 웹 어플리케이션을 만들게 되고 한 명 이상의 사용자가 생긴다. 어플리케이션을 베포하게되면 웹 보안에 대해서 자연스럽게 관심이 가게된다. 나는 위지윅 텍스트 에디터를 커스텀으로 만들어 적용시키려다가 XSS를 알게 되고 토스트 UI 에디터를 뜯어보면서 원대한 꿈을 잠시 접어두게 되었다. XSS…","frontmatter":{"date":"2021년 11월 21일","slug":"/front-end-and-web-sequrity","title":"프론트 앤드 개발자가 알아야할 웹 보안은 무엇이 있을까?","tags":["front-end","security"]}}},{"node":{"id":"eb1ca7fa-0903-51cc-9ee9-75a1dd90417d","excerpt":"자바스크립트 공부하다 비동기를 처리하는 방법에 XMLHttpRequest라는 것을 만나게 됐다. 나는 async/awiat을 써왔기 때문에 이게 뭔가 싶었다. 갑자기 fetch는 무엇이고 Promise는 무엇인지 햇갈렸다. fetch가 있는데 갑자기 XMLHttpRequest는 뭐지? fetch는 Promise 기반이라고 하는데 그럼 fetch와 Promise의 역할이 뭐지? 서로 같은건가? async/awiat와 fetch를 함께 쓰는데 async/await는 Promise…","frontmatter":{"date":"2021년 11월 19일","slug":"/ajax-with-javascript","title":"자바스크립트로 비동기를 처리하는 방법","tags":["ajax","javascript"]}}},{"node":{"id":"a82b33d6-b2ba-58eb-bbcf-87f0c1806a8c","excerpt":"폼을 검증하는 것은 사용자 경험에 좋은 영향을 준다. 회원가입이나 로그인을 할 때, 서식 쓰기를 거부하거나 회원 인증을 거부하면 왜 그런지 이유를 알려주어야한다. 그러지 않을 경우 사용자는 미궁속에 빠지게 될 것이다. 이전에 서식 검증 코드를 만들었지만 코드가 작동만 할 뿐이었다. 그래서 서식 검증 코드를 조금 손봐서 다시 작성하기로 했다. 기존의 서식 검증 코드는 프론트에서 글자수나 필수적으로 들어가야하는 문자에 대해서만 검증을 했다. 회원 가입 버튼을 눌렀을 때, 백앤드에서 아이디 중복이나 비밀번호 검증을 했다. 하지만 이 절차가 매우 불편했다. 왜냐하면 사용자가 이메일을 입력했을 때, 사용할 수 있다고 알려주었는데 회원 가입 버튼을 누르자 다시 이메일이 중복된다는 메시지를 프론트에 출력했기 때문에 사용자가 두 번 일을 해야했기 때문이다. 게다가 switch…","frontmatter":{"date":"2021년 11월 12일","slug":"/form-validation","title":"Form Validation","tags":["ajax","javascript","validation","form"]}}},{"node":{"id":"0b6e56f4-db39-5b43-baef-7fce0a7ffc4f","excerpt":"WTF... 잔디가 전부 뽑혀 날아가버렸다. 최근 pull을 하지 않고 작업물을 변경하면서 conflict로 인해서 스트레스를 엄청나게 받고 있었다. 그래서 나는 pull을 강제로 해서 문제들을 해결해왔다. 하지만 알수 없는 이유로 pull을 강제로 해도 되지 않았고, 양쪽 작업물 사이에서 왔다 갔다 하는 와중에 결국 나는 clone을 해서 작업물 기록을 새로 업데이트 하지 않고 어떻게 한건지 모르겠는 신박한 방법으로 push를 했다.(아마도 --force를 한듯하다.) 정말 어떻게 했는지 기억이 나지 않는다. .git 파일을 삭제하고 초기화한건지 뭔지는 모르겠지만... 잔디가 갑자기 전부 뽑힌것을 보고 당황했다. 이전에 저장해놨던 작업물이라도 있지 않을까 해서 노트북과 데스크탑을 모두 뒤졌지만 찾을 수 없었고, 결국 log…","frontmatter":{"date":"2021년 11월 09일","slug":"/i-m-losing-my-git","title":"잔디 잃고 git 사용법 익힌다","tags":["git"]}}},{"node":{"id":"8db559d5-8135-5389-aa54-5a9ef0d0e236","excerpt":"에디터를 붙이면서 도움이 됐던 글들 토스트 에디터 관련 tui.editor/app/editor 깃허브 저장소 에디터 문서\nTOAST UI Monthly 2021년 10월호 토스트 뷰어 관련 tui.editor/app/editor 깃허브 저장소 에디터 뷰어 문서\n에디터 뷰어 API XSS 취약점과 토스트 에디터를 선택한 이유 오픈 소스로 제공하는 텍스트 에디터가 많다. 처음에는 커스텀으로 처음부터 만들어보려고 했는데 XSS 취약점에 관련된 이슈가 리치 텍스트 에디터(위지윅)에 심각하다는 것을 알게 되었다. 그래서 해당 이슈를 최소한으로 할 수 있는 에디터를 찾다가 토스트 UI 에디터를 선택하게 되었다. 업데이트 내용\nTOAST UI Monthly 2021년 10월호 월간 토스트 UI 2021년 10월호를 보면 XSS 취약점을 개선하기 위해서DOMPurify를 적용했다고 한다. DOMPuryfiy DOMPuryfiy는 XSS…","frontmatter":{"date":"2021년 11월 08일","slug":"/learn-about-toast-ui-editor","title":"TOAST UI EDITOR를 붙이면서 배운것들","tags":["toast ui editor","how to","etc"]}}},{"node":{"id":"bca4fe98-1f3e-5f6f-b8c5-d145ab730647","excerpt":"다시 컴퓨터에 앉았다. 저번 구상대로 모든 것을 싹 바꾸기로 했다. 일단 프론트에서 회원가입 양식을 받아서 값을 먼저 검증하기로 했다. 그래서 기존에 회원 가입 양식을 확인하는 절차를 만들었다. 저번에 구상했던 것을 전부 뒤집어 엎었지만 지금이 코드 가독성이나 작동 측면이나 모든 면에서 훨씬 좋은 것 같다. 괜히 sessionStorage를 사용하지 않아도 된다. 일단 document에서 input값을 불러오는 것을 내가 반복하기가 너무 싫었다.(나는 게으르니까...) 그래서 querySelectAll을 사용해서 input을 전부 불러오기로 했다. 그럼 유사 배열로 input을 전부 불러올 수 있다. 만든 객체를 checkJoinData에 넘겨주고나면 객체 값을 검증하는 함수를 짰다. 최대한 반복을 피하고 싶었다. 그런데 왜 함수가 결국 거기서 거기인 것 같을까. 어쨌든 객체에 저장된 키 값을 각각 email, name, username, password…","frontmatter":{"date":"2021년 9월 02일","slug":"/validation-in-front-end","title":"Front에서 양식 검증하기","tags":["ajax","javascript","validation"]}}}]}},"pageContext":{}},"staticQueryHashes":["63159454"]}