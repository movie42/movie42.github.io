{"componentChunkName":"component---src-templates-blog-post-js","path":"/20221015-review","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>제목은 무라카미 하루키의 <a href=\"http://www.yes24.com/Product/Goods/3239082\">달리기를 말할 때 내가 하고 싶은 이야기</a>를 패러디 하였습니다.<br>\n좋은 책입니다. 읽어볼 것을 권장합니다.</p>\n</blockquote>\n<h1>Hello World</h1>\n<p>나는 프로그래머를 하겠다고 프로그래밍을 시작하지 않았다. 네이버 부스트코스에서 취업에 도움이 될까 해서 HTML, CSS를 배우게 되었다. 어찌어찌 전략이 통했는지 취업을 하게 되었다. 내 업무는 매우 광범위 했는데, 퍼블리싱도 그중 하나에 속했다. 메뉴 버튼을 클릭하면 숨겨진 메뉴가 나오도록 코드를 작성해야 했는데 그때 그냥 대강 알고 있던 자바스크립트를 사용할 일이 생겼었다. 시간이 지나고 프로그래머가 되는게 오히려 더 낫겠다는 생각이 들었다. 그때부터 자바스크립트를 진지하게 배우기 시작했다. 비어있는 스크립트 창에 console.log('hello world')를 입력하자 콘솔 창에서 \"hello world\"가 출력되는 것이 매우 신기했었다.</p>\n<p>지금은 Hello World를 작성하지 않는다. 아니 요즘은 console.log에서 벗어나려고 노력중이다. VSCode나 Chrome 개발 도구를 사용해서 디버깅을 하려고 노력 중이다. 새로운 도구에 대한 탐닉이라기 보다 에디터에 console.log를 치는 것이 귀찮아 졌기 때문이다. 처음엔 Hello World만 봐도 좋았는데 이제 console 디버깅이 귀찮아 새로운 도구를 찾고 있다. 자기에게 익숙해지는 것이 가장 당연한 사실이지만 때로는 익숙함이 권태를 가져오기도 한다.</p>\n<p>처음에 프로그래밍을 하겠다고 사직서를 냈을 때, 이렇게까지 취업이 안될꺼라고 생각하지 않았다. 그래서 그간 번 돈으로 여행도 다니고 공부도 하면서 여유를 가졌던 것이 사실이다. 아마 그렇게 여유를 가지던 시간 동안 취업의 골든 타임을 놓쳐버린 것일 수도 있다. 하지만 다년간의 백수 생활을 하면서 떠돌아다녀 본 결과 결국 어떻게 해서든 먹고 사는 길은 열렸기 때문에 조금 여유를 부렸다. 장기간 아르바이트가 들어오기도 하고, 취업이 되기도 하고, 공모전에 통과 하기도 하고, 부모에게 지원을 받기도 하면서 뭔가 죽을 듯 죽지 않는 삶이 계속 이어져왔다. 그러다가 영화를 그만 둬야겠다고 생각하고난 뒤에 갑자기 숨 막힐 듯 현실을 깨달았다. 영화, 다큐멘터리, 사진을 할 때도 열심히 했지만 왜 나는 유독 돈을 버는 단계를 넘어서지 못하고 포기를 하게 되었을까. 어쩌면 부모가 제공해준 이 환경이 너무 익숙하기 때문에 그냥 눌러 앉으려는 것일 수도 있다.</p>\n<p>돈을 번다는 것은 생사의 문제다. 모든 사람들은 태생적으로 생사의 기로에 놓인다. 돈이라는 것은 그냥 나에게 주어지지 않는다. 그래서 사람들은 자신의 욕망을 외면하면서 돈을 벌기 위해 사회로 나간다. 때론 자신이 선택한 직업이 자기가 하고 싶지 않은 일이라고 할지라도 살기 위해서 돈을 번다. 돈이 있어야 대출도 받을 수 있다. 먹고 싶은 것도 사먹을 수 있다. 연애도, 결혼도, 번식도, 누군가를 돕는 것도 다 돈이 있어야 가능하다. 배금주의는 아니다. 의식주를 해결하기 위해서는 돈을 벌어야하기 때문이다. 갑자기 운이 좋아서 누군가가 나에게 집을 주고 먹을 것을 주고 입을 것을 주지는 않기 때문이다. 노동에 대한 대가로 몇 푼 손에 쥐는 것이고 그 몇 푼이 욕망을 실현할 수 있도록 돕는다.</p>\n<p>몇 일 전 교육 기관에 선발 과제로 Todo App을 만들고 난 뒤에 조금 지쳤다. Todo 앱을 만드는 일이 돈을 버는 행위와 그다지 상관 없는 것이 아닌가 하는 생각에 조금 우울해졌다. 좋게 말하자면 과정인데 노력의 수확을 걷어들이지 못하면 결국 과정이라고 어떻게 말할 수 있을까? 그래도 과제를 내야하기에 '지금 하는거 열심히 하자.', '눈 앞에 Todo도 잘 못 만드는데 누가 나를 쓰냐'라는 등의 동기부여를 하면서 결국 만들어서 제출 했다.</p>\n<h1>Todo는 만들기 쉽나요?</h1>\n<p>Todo는 노마드코더에서 자바스크립트 무료 강의를 들으면서 처음 만들어 보았다. form 태그에 input과 button을 넣고, querySelector로 선택자를 불러와서 화면에 내가 키보드로 쓴 글자를 보이도록 했다. 지금은 쉬워 보이지만 Todo App도 만드는게 쉽지 않아서 몇 번 챌린지에 실패하고 몇 번 따라 만들었다. 지금 와서 보면 생각대로 구현이 안되어있는 것이 눈에 보인다. Todo 앱은 쉬워 보이지만 원하는 것을 구현하기 위해서 생각보다 많은 것을 고려해야 한다. 그리고 내가 원하는 기능을 추가하기 위해서 알아야하는 것도 많다.</p>\n<p><a href=\"https://movie42.github.io/todolist/\"><img src=\"/todo1.png\" alt=\"처음 구현했던 Todo\"></a>\n<a href=\"https://movie42.github.io/todolist/\">처음 구현했던 Todo</a></p>\n<p>자바스크립트 어플리케이션을 만들면서 함수를 이해하는데 애먹었었다. 어떤 매커니즘으로 함수가 동작하는지 잘 몰랐기 때문이다. 함수를 사용하기 위해서는 함수 선언문으로 선언하는 방법과 변수에 익명 함수를 할당해서 사용하는 방법이 있다. 또 화살표 함수를 사용할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleSubmit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleSubmit</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">text</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>함수는 호출을 해야 동작한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">hadleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"글 쓰기\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>함수를 호출할 때 넘긴 값은 인자(argument)라고 한다. 함수를 선언할 때 ()안에 넣는 값은 매개변수(parameter)라고 한다. 인자는 외부 값을 함수에 넘길 때 사용한다. 그리고 매개변수는 함수 내부에서 인자로 넘어온 값을 처리할 때 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleSubmit</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">text</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>text<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">를 해야합니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"글 쓰기\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>자바스크립트의 함수는 내부에서 일어나는 일에 최종 값을 return을 통해서 외부로 넘겨줄 수 있다. 물론 return을 하지 않을 수도 있다. 개발자가 함수에게 \"너가 어떤 일을 해줬으면 좋겠어\"라고 창조한다. 함수는 개발자의 말대로 움직인다. 함수가 어떤 값을 return하게 되면 자바스크립트에서는 return한 값을 변수에 할당하거나 다른 함수에 인자 값으로 넘겨줄 수 있다. 물론 다른 함수 내부에서 호출할 수 도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleSubmit</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">text</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>text<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">를 해야합니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">paintTodo</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">text</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"글 쓰기\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> todoItem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> todoContainer <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".todo-container\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  todoContainer<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>todoItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>함수를 만드는 것은 나의 어플리케이션에 생명을 불어 넣는 행동이다. 자바스크립트에서 함수는 정말 중요하다. 위에서 설명한 것 처럼 함수가 어떻게 선언되고 어떻게 호출될 수 있는지만 알아도 일단 Todo는 만들 수 있다. Todo를 만들면서 함수와 친해져볼 기회를 가질 수 있다.</p>\n<p>하지만 함수형 프로그래밍이나 객체 지향 프로그래밍이라는 개념 안에 함수가 무엇인지 설명해야 한다면 함수 앞에 많은 수식어가 붙게 된다. 생성자, 고차, 클로저, 커링 함수 등이 있다. 생성자 함수는 보통 객체 지향에서 많이 쓰인다. 생성자 함수는 블루 프린트(설계도)와 같다. 그래서 생성자 함수는 인스턴스로 호출될 수 있다. 자바스크립트에서 함수는 일급 객체이기 때문에 함수를 값으로 사용할 수 있다. 그래서 고차 함수를 만들 수 있다. 고차 함수는 간단하게 말하자면 함수를 인자로 받거나 함수를 반환하는 함수다. 고차 함수는 함수형 프로그래밍을 가능하게 해준다. 클로저는 자신이 선언된 환경을 기억하고 있는 함수다. 실행 컨텍스트를 알게 되면 자연스럽게 클로저로 문맥이 이어지게 된다. 커링 함수는 여러 개의 인자를 인자를 하나씩 받아서 실행하는 함수로 바꿔주는 함수다.</p>\n<p>이런 이론적인 문제는 사실 면접을 준비하거나 책을 읽다보면 알게 된다. Todo 앱을 만들면서 공부하게 되지는 않았다. 하지만 개념을 알게되면 Todo App에 적용은 해볼 수 있다. 어플리케이션의 규모가 작아 수정이 어렵지는 않기 때문에 이러한 개념을 위의 코드에 적용해서 개선해 볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// UserForm.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">UserForm</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> $target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> $userFormContainer <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  $userFormContainer<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">\"user-form-container\"</span><span class=\"token punctuation\">;</span>\n  $target<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>$userFormContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    $userFormContainer<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n        &lt;form class=\"user-form\">\n            &lt;input type=\"text\" placeholder=\"누구신가요?\"/>\n        &lt;/form>\n    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// app.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> $target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Index</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> $target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> $target <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">$target</span><span class=\"token operator\">:</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>만약 Todo 앱을 페이지 단위로 나눈다고 하였을 때, 위처럼 생성자 함수를 사용해서 컴포넌트 단위로 나눈다면 재사용하기가 훨씬 쉬울 것이다. 명령형 프로그래밍과 선언형 프로그래밍이라는 개념도 공부할 수 있다. Todo 앱 하나를 이야기하는데 함수 하나만 이야기해도 많은 개념이 나온다. 여기에 원하는 기능을 붙이려고 한다면 배울 수 있는 것은 무궁 무진하다.</p>\n<h1>현재 나의 Todo</h1>\n<p><a href=\"https://mellow-fox-0d0e62.netlify.app/\">현재 나의 Todo</a>는 배움에 대한 즐거움이라기 보다 생존의 문제에 더 가깝다. 절박해 보인다. 코드를 보면 스트레스가 느껴진다. '어떻게 하면 조금 더 좋은 코드로 비춰질 수 있을까?'라는 질문의 결과물이다. 만들면서 '무엇이 좋은 코드일까?'라는 고민보다 '어떻게 비춰질까?'라는 고민을 더 많이 했다. 물론 아이디어를 생각하고 해결해 나가는 과정은 여전히 즐거웠다. 하지만 결과가 '좋은 것인가'라는 대답에 '예'라고 자신있게 답할 수가 없다. 예전에 비해서 많이 아는 것은 사실이다. 더 빨리 만들 수 있는 것도 사실이다. 신경쓰고 고려한 것도 많다. 현재 나의 Todo는 내가 알고 있는 것을 최대한 활용해서 만들었다. 서식 검증 코드를 만들고 UX를 고려했다. 상태 관리 도구를 생각해보았다. 상태 관리를 어떻게 할지 생각해보았다. 컴포넌트를 어떻게 나눠야 할지 고민해보았다. 관심사 분리를 자연스럽게 생각해보았다. 비동기도 고려해 보았다. 타입스크립트를 사용하면서 타입을 어떻게 줄 수 있는지 고민을 했다. 폴더는 어떻게 나누는게 좋을지 고민해보았고 어떤 라이브러리를 사용하는 것이 좋을지 고민했다. 시작점과 현재를 이어보면 내가 어떻게 성장해왔는지 희미하게 보인다. 하지만 선명하지는 않다.</p>\n<p>Todo는 처음에는 즐거움이었지만 지금은 연습을 위한 도구가 되었다. 취업이라는 욕망을 실현하기 위해서 즐거움이라는 감정보다 프로 의식이 결여되면 안된다는 압박감이 더 크다. 아직 돈도 못버는데 프로 타령하는 것이 조금 청승맞아 보인다. 하지만 처음에 console만 입력해도 즐겁던 때는 이제 추억으로만 간직하는게 좋다. 나는 결코 유아기 때 머물고 싶지 않다. 물론 어떤 은퇴한 프로 농구 선수의 철학에 동의하지는 않는다. 여전히 나는 즐기는 자를 이길 수 없다는 생각을 하고 있다. 비교 우위를 틀리게 하기 때문에 사람들이 오해하고 있는지도 모른다. 내가 생각 했을 때, 나는 프로와 뛰는 프로 그리고 즐기는 프로가 있다면 당연코 즐기는 프로가 가장 뛰어난 프로라고 생각한다.(아마추어와 프로를 비교해서 즐기는 자를 이길 수 없다와 같은 비교는 그냥 틀린 비교라고 생각한다.) 또 어떤 은퇴한 프로 축구 선수의 말도 동의하지 않는다. 노력은 재능을 이길 수 없다. 노력이 재능을 이길 수 있다는 것은 천재를 시기 질투한 자들의 달콤한 속임수일 뿐이다. 내가 아무리 노력한다고 한들 빌 게이츠가 될 수는 없다. 존 카맥이 될 수도 없고 제임스 고슬링이 될 수 없다. 천재라 불리우는 그들도 남들 다하는 노력은 한다. 그들을 따라가려는 것은 가랑이가 찢어지는 소리를 철없이 하는 것에 불과하다. 나는 나만에 방법을 찾아야한다. 노력은 당연한 것이다. 좀!</p>\n<h1>그래서 Todo 앱은 만들기 쉽나요?</h1>\n<p>현재의 수준에서 Todo 앱은 여전히 만들기 어려운 어플리케이션이다. 아마 프로그래밍 경력이 쌓이더라도 Todo 앱은 그때의 수준에서 만들기 어려운 어플리케이션이 될 것 같다. 아마 그때마다 임계점을 넘어서는 고통을 겪어야 할 것이다. 그러나 그 이후에 물이 끓기 시작하면 맛있는 제육 볶음을 만들어 먹을 수 있다. 호기심은 식욕과도 같다. 항상 때가 되면 배가 고픈것 처럼 배울 수록 호기심은 더 늘어난다. 하지만 호기심을 채우기 위해서는 밥을 차려 먹어야한다. 처음엔 엄마가 차려준 밥을 먹는데 익숙하지만 나이가 들면 독립을 해서 밥상을 내가 차려야한다. Todo 앱은 나의 성장을 반영하고 있다. 지식을 습득하는 방향이 점점 떠먹여 주는 것에서 차려 먹는 쪽으로 바뀌어가고 있다. 앞으로 먼 미래의 이야기지만 나중에는 차려주는 사람이 될 수 도 있다. 내가 프론트앤드 개발자로써 현재에 대한 호기심을 지속적으로 가지고 있다면 Todo 앱은 호기심을 채우기에 평범한 한끼 식사가 될 수 있을 것 같다.</p>","frontmatter":{"date":"2022년 10월 15일","tags":["review","todo","front-end"],"slug":"/20221015-review","title":"투 두 앱을 이야기 할 때 내가 하고 싶은 이야기"}}},"pageContext":{}},"staticQueryHashes":["63159454"]}